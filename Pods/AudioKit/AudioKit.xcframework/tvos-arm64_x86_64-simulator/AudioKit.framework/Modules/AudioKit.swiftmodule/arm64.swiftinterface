// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-tvos10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AudioKit
import AVFoundation
import Accelerate
@_exported import AudioKit
import AudioToolbox
import CoreAudio
import Dispatch
import Foundation
import Swift
import UIKit
import os
@objc @_inheritsConvenienceInitializers public class AKHighShelfParametricEqualizerFilterAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKReverb : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKInput {
  @objc dynamic open var dryWetMix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool
  @objc public init(_ input: AudioKit.AKNode? = nil, dryWetMix: Swift.Double = 0.5)
  open func loadFactoryPreset(_ preset: AVFoundation.AVAudioUnitReverbPreset)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
}
@objc @_inheritsConvenienceInitializers public class AKFMOscillatorAudioUnit : AudioKit.AKGeneratorAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension AKComputedParameter {
  public func delay(time: Swift.Double = 1.0, feedback: AudioKit.AKParameter = 0.0) -> AudioKit.AKOperation
}
extension AKTuningTable {
  public func scalaFile(_ filePath: Swift.String) -> Swift.Int?
  open func frequencies(fromScalaString rawStr: Swift.String?) -> [AudioKit.AKTuningTable.Frequency]?
}
extension OSLog {
  public static let general: os.OSLog
  public static let settings: os.OSLog
  public static let midi: os.OSLog
  public static let fileHandling: os.OSLog
}
@inline(__always) public func AKLog(_ items: Any?..., log: os.OSLog = OSLog.general, type: os.OSLogType = .info, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
extension AKOperation {
  public func times(_ parameter: AudioKit.AKParameter) -> AudioKit.AKOperation
  public func scaledBy(_ parameter: AudioKit.AKParameter) -> AudioKit.AKOperation
}
public func * (left: AudioKit.AKParameter, right: AudioKit.AKParameter) -> AudioKit.AKOperation
public func * (left: AudioKit.AKStereoOperation, right: AudioKit.AKParameter) -> AudioKit.AKStereoOperation
public func * (left: AudioKit.AKParameter, right: AudioKit.AKStereoOperation) -> AudioKit.AKStereoOperation
@objc @_inheritsConvenienceInitializers public class AKTanhDistortionAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension AKOperation {
  public func scale(minimum: AudioKit.AKParameter = 0, maximum: AudioKit.AKParameter = 1) -> AudioKit.AKOperation
}
public func min(_ x: AudioKit.AKComputedParameter, _ y: AudioKit.AKComputedParameter) -> AudioKit.AKOperation
public func min(_ operation: AudioKit.AKComputedParameter, _ parameter: AudioKit.AKParameter) -> AudioKit.AKOperation
public func min(_ parameter: AudioKit.AKParameter, _ operation: AudioKit.AKComputedParameter) -> AudioKit.AKOperation
@objc open class AKBitCrusher : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKBitCrusherAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let bitDepthRange: Swift.ClosedRange<Swift.Double>
  public static let sampleRateRange: Swift.ClosedRange<Swift.Double>
  public static let defaultBitDepth: Swift.Double
  public static let defaultSampleRate: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var bitDepth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var sampleRate: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, bitDepth: Swift.Double = defaultBitDepth, sampleRate: Swift.Double = defaultSampleRate)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKBitCrusher
}
@objc @_inheritsConvenienceInitializers public class AKPannerAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKPitchShifter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKPitchShifterAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let shiftRange: Swift.ClosedRange<Swift.Double>
  public static let windowSizeRange: Swift.ClosedRange<Swift.Double>
  public static let crossfadeRange: Swift.ClosedRange<Swift.Double>
  public static let defaultShift: Swift.Double
  public static let defaultWindowSize: Swift.Double
  public static let defaultCrossfade: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var shift: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var windowSize: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var crossfade: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, shift: Swift.Double = defaultShift, windowSize: Swift.Double = defaultWindowSize, crossfade: Swift.Double = defaultCrossfade)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKPitchShifter
}
@objc @_inheritsConvenienceInitializers public class AKFormantFilterAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKFrequencyTracker : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKFrequencyTrackerAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc dynamic open var amplitude: Swift.Double {
    @objc get
  }
  @objc dynamic open var frequency: Swift.Double {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, hopSize: Swift.Int = 4_096, peakCount: Swift.Int = 20)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKFrequencyTracker
}
extension AKOperation {
  public static func randomVertexPulse(minimum: AudioKit.AKParameter = 0, maximum: AudioKit.AKParameter = 1, updateFrequency: AudioKit.AKParameter = 3) -> AudioKit.AKOperation
}
@objc @_inheritsConvenienceInitializers public class AKAmplitudeEnvelopeAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKBandRejectButterworthFilter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKBandRejectButterworthFilterAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let centerFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let bandwidthRange: Swift.ClosedRange<Swift.Double>
  public static let defaultCenterFrequency: Swift.Double
  public static let defaultBandwidth: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var centerFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var bandwidth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, centerFrequency: Swift.Double = defaultCenterFrequency, bandwidth: Swift.Double = defaultBandwidth)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKBandRejectButterworthFilter
}
@objc open class AKTremolo : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKTremoloAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let frequencyRange: Swift.ClosedRange<Swift.Double>
  public static let depthRange: Swift.ClosedRange<Swift.Double>
  public static let defaultFrequency: Swift.Double
  public static let defaultDepth: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var frequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var depth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, frequency: Swift.Double = defaultFrequency, depth: Swift.Double = defaultDepth, waveform: AudioKit.AKTable = AKTable(.positiveSine))
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKTremolo
}
extension AKOperation {
  public static func metronome(frequency: AudioKit.AKParameter = 2.0) -> AudioKit.AKOperation
}
@objc public protocol ClipMergeDelegate : AnyObject {
  @objc func newClip(from clip: AudioKit.AKClip, time: Swift.Double, offset: Swift.Double, duration: Swift.Double) -> AudioKit.AKClip?
  @objc optional func clipWillBeRemoved(_ clip: AudioKit.AKClip)
}
public enum ClipMergeError : Swift.Error {
  case clipInvalid
  case clipsOverlap
  public static func == (a: AudioKit.ClipMergeError, b: AudioKit.ClipMergeError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers open class AKClipMerger : ObjectiveC.NSObject {
  weak open var mergeDelegate: AudioKit.ClipMergeDelegate?
  @objc open func merge(clip: AudioKit.AKClip, clips: [AudioKit.AKClip]) -> [AudioKit.AKClip]
  open class func validateClips(_ clips: [AudioKit.AKClip]) throws -> [AudioKit.AKClip]
  @objc deinit
  @objc override dynamic public init()
}
@objc open class AKFileClipSequence : ObjectiveC.NSObject, AudioKit.ClipMergeDelegate {
  @objc open func newClip(from clip: AudioKit.AKClip, time: Swift.Double, offset: Swift.Double, duration: Swift.Double) -> AudioKit.AKClip?
  @objc open var clips: [AudioKit.AKFileClip] {
    @objc get
    @objc set
  }
  @objc open func add(clip: AudioKit.AKFileClip)
  @objc public init(clips: [AudioKit.AKFileClip])
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class AKRolandTB303FilterAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension AKOperation {
  public static func sawtooth(frequency: AudioKit.AKParameter = 440, amplitude: AudioKit.AKParameter = 0.5, phase: AudioKit.AKParameter = 0) -> AudioKit.AKOperation
  public static func reverseSawtooth(frequency: AudioKit.AKParameter = 440, amplitude: AudioKit.AKParameter = 0.5, phase: AudioKit.AKParameter = 0) -> AudioKit.AKOperation
}
extension AKComputedParameter {
  public func autoWah(wah: AudioKit.AKParameter = 0, amplitude: AudioKit.AKParameter = 0.1) -> AudioKit.AKOperation
}
extension AKComputedParameter {
  public func korgLowPassFilter(cutoffFrequency: AudioKit.AKParameter = 1_000.0, resonance: AudioKit.AKParameter = 1.0, saturation: AudioKit.AKParameter = 0.0) -> AudioKit.AKOperation
}
@objc @_inheritsConvenienceInitializers public class AKBrownianNoiseAudioUnit : AudioKit.AKGeneratorAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension AKMoogLadder {
  public func presetFogMoogLadder()
  public func presetDullNoiseMoogLadder()
  public func printCurrentValuesAsPreset()
}
@objc open class AKDynamicRangeCompressor : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKDynamicRangeCompressorAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let ratioRange: Swift.ClosedRange<Swift.Double>
  public static let thresholdRange: Swift.ClosedRange<Swift.Double>
  public static let attackDurationRange: Swift.ClosedRange<Swift.Double>
  public static let releaseDurationRange: Swift.ClosedRange<Swift.Double>
  public static let defaultRatio: Swift.Double
  public static let defaultThreshold: Swift.Double
  public static let defaultAttackDuration: Swift.Double
  public static let defaultReleaseDuration: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var ratio: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var threshold: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var attackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var releaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc dynamic open var compressionAmount: Swift.Float {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, ratio: Swift.Double = defaultRatio, threshold: Swift.Double = defaultThreshold, attackDuration: Swift.Double = defaultAttackDuration, releaseDuration: Swift.Double = defaultReleaseDuration)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKDynamicRangeCompressor
}
@objc open class AKBrownianNoise : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKBrownianNoiseAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let amplitudeRange: Swift.ClosedRange<Swift.Double>
  public static let defaultAmplitude: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var amplitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(amplitude: Swift.Double = defaultAmplitude)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKBrownianNoise
}
extension AKManager {
  @available(*, deprecated, renamed: "AKSettings.audioFormat")
  @objc public static var format: AVFoundation.AVAudioFormat {
    @objc get
  }
}
extension AKComputedParameter {
  public func reverberateWithChowning() -> AudioKit.AKOperation
}
@objc @_inheritsConvenienceInitializers public class AKFluteAudioUnit : AudioKit.AKGeneratorAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AKHighPassButterworthFilterAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKDistortion : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKInput {
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var delay: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var decay: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var delayMix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var decimation: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var rounding: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var decimationMix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var linearTerm: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var squaredTerm: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var cubicTerm: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var polynomialMix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var ringModFreq1: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var ringModFreq2: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var ringModBalance: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var ringModMix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var softClipGain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var finalMix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool
  @objc public init(_ input: AudioKit.AKNode? = nil, delay: Swift.Double = 0.1, decay: Swift.Double = 1.0, delayMix: Swift.Double = 0.5, decimation: Swift.Double = 0.5, rounding: Swift.Double = 0.0, decimationMix: Swift.Double = 0.5, linearTerm: Swift.Double = 0.5, squaredTerm: Swift.Double = 0.5, cubicTerm: Swift.Double = 0.5, polynomialMix: Swift.Double = 0.5, ringModFreq1: Swift.Double = 100, ringModFreq2: Swift.Double = 100, ringModBalance: Swift.Double = 0.5, ringModMix: Swift.Double = 0.0, softClipGain: Swift.Double = -6, finalMix: Swift.Double = 0.5)
  @objc open func start()
  @objc open func stop()
  override open func detach()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKDistortion
}
extension AKOperation {
  public static func square(frequency: AudioKit.AKParameter = 440, amplitude: AudioKit.AKParameter = 0.5, phase: AudioKit.AKParameter = 0) -> AudioKit.AKOperation
}
public protocol Aliased {
  associatedtype _Self = Self
}
public protocol AUComponent : AnyObject, AudioKit.Aliased {
  static var ComponentDescription: AudioToolbox.AudioComponentDescription { get }
}
public protocol AKComponent : AudioKit.AUComponent {
  associatedtype AKAudioUnitType : AnyObject
}
extension AKComponent {
  public static func register()
}
extension AUParameterTree {
  public subscript(key: Swift.String) -> AudioToolbox.AUParameter? {
    get
  }
  public class func createParameter(identifier: Swift.String, name: Swift.String, address: AudioToolbox.AUParameterAddress, range: Swift.ClosedRange<Swift.Double>, unit: AudioToolbox.AudioUnitParameterUnit, flags: AudioToolbox.AudioUnitParameterOptions = []) -> AudioToolbox.AUParameter
}
extension AudioComponentDescription {
  public init(type: Darwin.OSType, subType: Darwin.OSType)
  public init(appleEffect subType: Darwin.OSType)
  public init(effect subType: Darwin.OSType)
  public init(effect subType: Swift.String)
  public init(mixer subType: Swift.String)
  public init(generator subType: Swift.String)
  public init(instrument subType: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class AKRhodesPianoAudioUnit : AudioKit.AKGeneratorAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AKFlatFrequencyResponseReverbAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension AKMandolin {
  public func presetLargeResonantMandolin()
  public func presetOctaveUpMandolin()
  public func presetElectricGuitarMandolin()
  public func presetSmallBodiedDistortedMandolin()
  public func presetAcidMandolin()
  public func printCurrentValuesAsPreset()
}
@objc open class AKMicrophone : AudioKit.AKNode, AudioKit.AKToggleable {
  @objc dynamic open var volume: Swift.Double {
    @objc get
    @objc set
  }
  @objc public func setDevice(_ device: AudioKit.AKDevice) throws
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init?(with format: AVFoundation.AVAudioFormat? = nil)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
}
public func max(_ x: AudioKit.AKComputedParameter, _ y: AudioKit.AKComputedParameter) -> AudioKit.AKOperation
public func max(_ operation: AudioKit.AKComputedParameter, _ parameter: AudioKit.AKParameter) -> AudioKit.AKOperation
public func max(_ parameter: AudioKit.AKParameter, _ operation: AudioKit.AKComputedParameter) -> AudioKit.AKOperation
@objc open class AKMetalBar : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKMetalBarAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let leftBoundaryConditionRange: Swift.ClosedRange<Swift.Double>
  public static let rightBoundaryConditionRange: Swift.ClosedRange<Swift.Double>
  public static let decayDurationRange: Swift.ClosedRange<Swift.Double>
  public static let scanSpeedRange: Swift.ClosedRange<Swift.Double>
  public static let positionRange: Swift.ClosedRange<Swift.Double>
  public static let strikeVelocityRange: Swift.ClosedRange<Swift.Double>
  public static let strikeWidthRange: Swift.ClosedRange<Swift.Double>
  public static let defaultLeftBoundaryCondition: Swift.Double
  public static let defaultRightBoundaryCondition: Swift.Double
  public static let defaultDecayDuration: Swift.Double
  public static let defaultScanSpeed: Swift.Double
  public static let defaultPosition: Swift.Double
  public static let defaultStrikeVelocity: Swift.Double
  public static let defaultStrikeWidth: Swift.Double
  public static let defaultStiffness: Swift.Double
  public static let defaultHighFrequencyDamping: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var leftBoundaryCondition: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var rightBoundaryCondition: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var decayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var scanSpeed: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var position: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var strikeVelocity: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var strikeWidth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(leftBoundaryCondition: Swift.Double = defaultLeftBoundaryCondition, rightBoundaryCondition: Swift.Double = defaultRightBoundaryCondition, decayDuration: Swift.Double = defaultDecayDuration, scanSpeed: Swift.Double = defaultScanSpeed, position: Swift.Double = defaultPosition, strikeVelocity: Swift.Double = defaultStrikeVelocity, strikeWidth: Swift.Double = defaultStrikeWidth, stiffness: Swift.Double = defaultStiffness, highFrequencyDamping: Swift.Double = defaultHighFrequencyDamping)
  open func trigger()
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKMetalBar
}
extension AKTuningTable {
  @discardableResult
  @objc dynamic public func hexany(_ A: AudioKit.AKTuningTable.Frequency, _ B: AudioKit.AKTuningTable.Frequency, _ C: AudioKit.AKTuningTable.Frequency, _ D: AudioKit.AKTuningTable.Frequency) -> Swift.Int
  @discardableResult
  @objc dynamic public func majorTetrany(_ A: AudioKit.AKTuningTable.Frequency, _ B: AudioKit.AKTuningTable.Frequency, _ C: AudioKit.AKTuningTable.Frequency, _ D: AudioKit.AKTuningTable.Frequency) -> Swift.Int
  @discardableResult
  @objc dynamic public func minorTetrany(_ A: AudioKit.AKTuningTable.Frequency, _ B: AudioKit.AKTuningTable.Frequency, _ C: AudioKit.AKTuningTable.Frequency, _ D: AudioKit.AKTuningTable.Frequency) -> Swift.Int
}
@objc @_inheritsConvenienceInitializers public class AKClarinetAudioUnit : AudioKit.AKGeneratorAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AKZitaReverbAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKPWMOscillator : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKPWMOscillatorAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let frequencyRange: Swift.ClosedRange<Swift.Double>
  public static let amplitudeRange: Swift.ClosedRange<Swift.Double>
  public static let pulseWidthRange: Swift.ClosedRange<Swift.Double>
  public static let detuningOffsetRange: Swift.ClosedRange<Swift.Double>
  public static let detuningMultiplierRange: Swift.ClosedRange<Swift.Double>
  public static let defaultFrequency: Swift.Double
  public static let defaultAmplitude: Swift.Double
  public static let defaultPulseWidth: Swift.Double
  public static let defaultDetuningOffset: Swift.Double
  public static let defaultDetuningMultiplier: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var frequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var amplitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pulseWidth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var detuningOffset: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var detuningMultiplier: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc convenience override dynamic public init()
  @objc public init(frequency: Swift.Double, amplitude: Swift.Double = defaultAmplitude, pulseWidth: Swift.Double = defaultPulseWidth, detuningOffset: Swift.Double = defaultDetuningOffset, detuningMultiplier: Swift.Double = defaultDetuningMultiplier)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKPWMOscillator
}
@objc @_inheritsConvenienceInitializers public class AKModalResonanceFilterAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKClipPlayer : AudioKit.AKNode {
  final public let playerNode: AVFoundation.AVAudioPlayerNode
  open var currentTime: Swift.Double {
    get
    set
  }
  open var isPlaying: Swift.Bool {
    get
  }
  open func setClips(clips: [AudioKit.FileClip]) throws
  open var clips: [AudioKit.FileClip] {
    get
    set
  }
  convenience public init?(clips: [AudioKit.FileClip])
  @objc override dynamic public init()
  open func prepare(withFrameCount frameCount: AVFoundation.AVAudioFrameCount)
  open func play()
  open func play(at audioTime: AVFoundation.AVAudioTime?)
  @objc open func stop()
  open var volume: Swift.Float {
    get
    set
  }
  open var pan: Swift.Float {
    get
    set
  }
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
}
extension AKClipPlayer : AudioKit.AKTiming {
  @objc dynamic public var isStarted: Swift.Bool {
    @objc get
  }
  @objc dynamic open func start(at audioTime: AVFoundation.AVAudioTime? = nil)
  @objc dynamic open func setPosition(_ position: Swift.Double)
  @objc dynamic open func position(at audioTime: AVFoundation.AVAudioTime?) -> Swift.Double
  @objc dynamic open func audioTime(at time: Swift.Double) -> AVFoundation.AVAudioTime?
  @objc dynamic open func prepare()
}
public typealias AKCallback = () -> Swift.Void
public typealias AKMIDICallback = (AudioKit.MIDIByte, AudioKit.MIDIByte, AudioKit.MIDIByte) -> Swift.Void
@objc @_inheritsConvenienceInitializers open class AKManager : ObjectiveC.NSObject {
  public static let deviceSampleRate: Swift.Double
  @objc public static var engine: AVFoundation.AVAudioEngine {
    @objc get
    @objc set
  }
  @objc public static var output: AudioKit.AKNode? {
    @objc get
    @objc set
  }
  @objc public static var inputDevices: [AudioKit.AKDevice]? {
    @objc get
  }
  @objc public static var outputDevices: [AudioKit.AKDevice]? {
    @objc get
  }
  @objc public static var inputDevice: AudioKit.AKDevice? {
    @objc get
  }
  @objc public static var outputDevice: AudioKit.AKDevice? {
    @objc get
  }
  @objc public static func setInputDevice(_ input: AudioKit.AKDevice) throws
  @objc public static func setOutputDevice(_ output: AudioKit.AKDevice) throws
  @objc public static func disconnectAllInputs()
  @objc deinit
  @objc override dynamic public init()
}
@objc open class AKRingModulator : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKInput {
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var frequency1: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var frequency2: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var balance: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var mix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool
  @objc public init(_ input: AudioKit.AKNode? = nil, frequency1: Swift.Double = 100, frequency2: Swift.Double = 100, balance: Swift.Double = 0.5, mix: Swift.Double = 1)
  @objc open func start()
  @objc open func stop()
  override open func detach()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKRingModulator
}
@objc @_inheritsConvenienceInitializers public class AKTremoloAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AKSamplerAudioUnit : AudioKit.AKGeneratorAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  public func stopAllVoices()
  public func restartVoices()
  public func loadSampleData(from sampleDataDescriptor: AudioKit.AKSampleDataDescriptor)
  public func loadCompressedSampleFile(from sampleFileDescriptor: AudioKit.AKSampleFileDescriptor)
  public func unloadAllSamples()
  public func setNoteFrequency(noteNumber: Swift.Int32, noteFrequency: Swift.Float)
  public func buildSimpleKeyMap()
  public func buildKeyMap()
  public func setLoop(thruRelease: Swift.Bool)
  public func playNote(noteNumber: Swift.UInt8, velocity: Swift.UInt8)
  public func stopNote(noteNumber: Swift.UInt8, immediate: Swift.Bool)
  public func sustainPedal(down: Swift.Bool)
  @objc override dynamic public func shouldClearOutputBuffer() -> Swift.Bool
  @objc deinit
}
@objc open class AKZitaReverb : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKZitaReverbAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let predelayRange: Swift.ClosedRange<Swift.Double>
  public static let crossoverFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let lowReleaseTimeRange: Swift.ClosedRange<Swift.Double>
  public static let midReleaseTimeRange: Swift.ClosedRange<Swift.Double>
  public static let dampingFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let equalizerFrequency1Range: Swift.ClosedRange<Swift.Double>
  public static let equalizerLevel1Range: Swift.ClosedRange<Swift.Double>
  public static let equalizerFrequency2Range: Swift.ClosedRange<Swift.Double>
  public static let equalizerLevel2Range: Swift.ClosedRange<Swift.Double>
  public static let dryWetMixRange: Swift.ClosedRange<Swift.Double>
  public static let defaultPredelay: Swift.Double
  public static let defaultCrossoverFrequency: Swift.Double
  public static let defaultLowReleaseTime: Swift.Double
  public static let defaultMidReleaseTime: Swift.Double
  public static let defaultDampingFrequency: Swift.Double
  public static let defaultEqualizerFrequency1: Swift.Double
  public static let defaultEqualizerLevel1: Swift.Double
  public static let defaultEqualizerFrequency2: Swift.Double
  public static let defaultEqualizerLevel2: Swift.Double
  public static let defaultDryWetMix: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var predelay: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var crossoverFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var lowReleaseTime: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var midReleaseTime: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var dampingFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var equalizerFrequency1: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var equalizerLevel1: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var equalizerFrequency2: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var equalizerLevel2: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var dryWetMix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, predelay: Swift.Double = defaultPredelay, crossoverFrequency: Swift.Double = defaultCrossoverFrequency, lowReleaseTime: Swift.Double = defaultLowReleaseTime, midReleaseTime: Swift.Double = defaultMidReleaseTime, dampingFrequency: Swift.Double = defaultDampingFrequency, equalizerFrequency1: Swift.Double = defaultEqualizerFrequency1, equalizerLevel1: Swift.Double = defaultEqualizerLevel1, equalizerFrequency2: Swift.Double = defaultEqualizerFrequency2, equalizerLevel2: Swift.Double = defaultEqualizerLevel2, dryWetMix: Swift.Double = defaultDryWetMix)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKZitaReverb
}
@objc open class AKChowningReverb : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKChowningReverbAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKChowningReverb
}
extension AKComputedParameter {
  public func trackedAmplitude(_ trackedAmplitude: AudioKit.AKParameter = 0) -> AudioKit.AKOperation
}
@objc open class AKPanner : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKPannerAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let panRange: Swift.ClosedRange<Swift.Double>
  public static let defaultPan: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pan: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, pan: Swift.Double = defaultPan)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKPanner
}
@objc @_inheritsConvenienceInitializers public class AKClipperAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKPhaseDistortionOscillatorBank : AudioKit.AKPolyphonicNode, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKPhaseDistortionOscillatorBankAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var phaseDistortion: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var attackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var decayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var sustainLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var releaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pitchBend: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoDepth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoRate: Swift.Double {
    @objc get
    @objc set
  }
  @objc convenience override dynamic public init()
  @objc public init(waveform: AudioKit.AKTable, phaseDistortion: Swift.Double = 0.0, attackDuration: Swift.Double = 0.1, decayDuration: Swift.Double = 0.1, sustainLevel: Swift.Double = 1.0, releaseDuration: Swift.Double = 0.1, pitchBend: Swift.Double = 0, vibratoDepth: Swift.Double = 0, vibratoRate: Swift.Double = 0)
  @objc override open func play(noteNumber: AudioKit.MIDINoteNumber, velocity: AudioKit.MIDIVelocity, frequency: Swift.Double, channel: AudioKit.MIDIChannel = 0)
  @objc override open func stop(noteNumber: AudioKit.MIDINoteNumber)
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKPhaseDistortionOscillatorBank
}
public func AKTry(_ operation: @escaping (() throws -> Swift.Void)) throws
@objc open class AKRolandTB303Filter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKRolandTB303FilterAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let cutoffFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let resonanceRange: Swift.ClosedRange<Swift.Double>
  public static let distortionRange: Swift.ClosedRange<Swift.Double>
  public static let resonanceAsymmetryRange: Swift.ClosedRange<Swift.Double>
  public static let defaultCutoffFrequency: Swift.Double
  public static let defaultResonance: Swift.Double
  public static let defaultDistortion: Swift.Double
  public static let defaultResonanceAsymmetry: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var cutoffFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var resonance: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var distortion: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var resonanceAsymmetry: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, cutoffFrequency: Swift.Double = defaultCutoffFrequency, resonance: Swift.Double = defaultResonance, distortion: Swift.Double = defaultDistortion, resonanceAsymmetry: Swift.Double = defaultResonanceAsymmetry)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKRolandTB303Filter
}
@objc open class AKPinkNoise : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKPinkNoiseAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let amplitudeRange: Swift.ClosedRange<Swift.Double>
  public static let defaultAmplitude: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var amplitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(amplitude: Swift.Double = defaultAmplitude)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKPinkNoise
}
@objc @_inheritsConvenienceInitializers public class AKToneComplementFilterAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension AKOperation {
  public func minus(_ subtrahend: AudioKit.AKParameter) -> AudioKit.AKOperation
}
public func - (left: AudioKit.AKParameter, right: AudioKit.AKParameter) -> AudioKit.AKOperation
public func - (first: AudioKit.AKStereoOperation, second: AudioKit.AKStereoOperation) -> AudioKit.AKStereoOperation
prefix public func - (x: AudioKit.AKParameter) -> AudioKit.AKOperation
prefix public func - (x: AudioKit.AKStereoOperation) -> AudioKit.AKStereoOperation
@objc open class AKHighPassButterworthFilter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKHighPassButterworthFilterAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let cutoffFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let defaultCutoffFrequency: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var cutoffFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, cutoffFrequency: Swift.Double = defaultCutoffFrequency)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKHighPassButterworthFilter
}
extension AKOperation {
  public static func squareWave(frequency: AudioKit.AKParameter = 440, amplitude: AudioKit.AKParameter = 1.0, pulseWidth: AudioKit.AKParameter = 0.5) -> AudioKit.AKOperation
}
@objc open class AKVocalTract : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKVocalTractAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let frequencyRange: Swift.ClosedRange<Swift.Double>
  public static let tonguePositionRange: Swift.ClosedRange<Swift.Double>
  public static let tongueDiameterRange: Swift.ClosedRange<Swift.Double>
  public static let tensenessRange: Swift.ClosedRange<Swift.Double>
  public static let nasalityRange: Swift.ClosedRange<Swift.Double>
  public static let defaultFrequency: Swift.Double
  public static let defaultTonguePosition: Swift.Double
  public static let defaultTongueDiameter: Swift.Double
  public static let defaultTenseness: Swift.Double
  public static let defaultNasality: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var frequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var tonguePosition: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var tongueDiameter: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var tenseness: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var nasality: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(frequency: Swift.Double = defaultFrequency, tonguePosition: Swift.Double = defaultTonguePosition, tongueDiameter: Swift.Double = defaultTongueDiameter, tenseness: Swift.Double = defaultTenseness, nasality: Swift.Double = defaultNasality)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKVocalTract
}
@objc open class AKReverb2 : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKInput {
  @objc dynamic open var dryWetMix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var gain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var minDelayTime: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var maxDelayTime: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var decayTimeAt0Hz: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var decayTimeAtNyquist: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var randomizeReflections: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool
  @objc public init(_ input: AudioKit.AKNode? = nil, dryWetMix: Swift.Double = 0.5, gain: Swift.Double = 0, minDelayTime: Swift.Double = 0.008, maxDelayTime: Swift.Double = 0.050, decayTimeAt0Hz: Swift.Double = 1.0, decayTimeAtNyquist: Swift.Double = 0.5, randomizeReflections: Swift.Double = 1)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
}
@objc open class AKDCBlock : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKDCBlockAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKDCBlock
}
@objc open class AKTanhDistortion : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKTanhDistortionAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let pregainRange: Swift.ClosedRange<Swift.Double>
  public static let postgainRange: Swift.ClosedRange<Swift.Double>
  public static let positiveShapeParameterRange: Swift.ClosedRange<Swift.Double>
  public static let negativeShapeParameterRange: Swift.ClosedRange<Swift.Double>
  public static let defaultPregain: Swift.Double
  public static let defaultPostgain: Swift.Double
  public static let defaultPositiveShapeParameter: Swift.Double
  public static let defaultNegativeShapeParameter: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pregain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var postgain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var positiveShapeParameter: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var negativeShapeParameter: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, pregain: Swift.Double = defaultPregain, postgain: Swift.Double = defaultPostgain, positiveShapeParameter: Swift.Double = defaultPositiveShapeParameter, negativeShapeParameter: Swift.Double = defaultNegativeShapeParameter)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKTanhDistortion
}
@objc @_inheritsConvenienceInitializers public class AKThreePoleLowpassFilterAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension AKComputedParameter {
  public func lowPassButterworthFilter(cutoffFrequency: AudioKit.AKParameter = 1_000) -> AudioKit.AKOperation
}
@objc open class AKToneComplementFilter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKToneComplementFilterAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let halfPowerPointRange: Swift.ClosedRange<Swift.Double>
  public static let defaultHalfPowerPoint: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var halfPowerPoint: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, halfPowerPoint: Swift.Double = defaultHalfPowerPoint)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKToneComplementFilter
}
@objc open class AKPeakingParametricEqualizerFilter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKPeakingParametricEqualizerFilterAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let centerFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let gainRange: Swift.ClosedRange<Swift.Double>
  public static let qRange: Swift.ClosedRange<Swift.Double>
  public static let defaultCenterFrequency: Swift.Double
  public static let defaultGain: Swift.Double
  public static let defaultQ: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var centerFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var gain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var q: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, centerFrequency: Swift.Double = defaultCenterFrequency, gain: Swift.Double = defaultGain, q: Swift.Double = defaultQ)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKPeakingParametricEqualizerFilter
}
extension AVAudioCommonFormat : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc extension AVAudioFile {
  @objc dynamic open var samplesCount: Swift.Int64 {
    @objc get
  }
  @objc dynamic open var sampleRate: Swift.Double {
    @objc get
  }
  @objc dynamic open var channelCount: Swift.UInt32 {
    @objc get
  }
  @objc dynamic open var duration: Swift.Double {
    @objc get
  }
  @objc dynamic open var interleaved: Swift.Bool {
    @objc get
  }
  @objc dynamic open var standard: Swift.Bool {
    @objc get
  }
  @objc dynamic open var commonFormatString: Swift.String {
    @objc get
  }
  @objc dynamic open var directoryPath: Foundation.URL {
    @objc get
  }
  @objc dynamic open var fileNamePlusExtension: Swift.String {
    @objc get
  }
  @objc dynamic open var fileName: Swift.String {
    @objc get
  }
  @objc dynamic open var fileExt: Swift.String {
    @objc get
  }
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc dynamic public var mimeType: Swift.String? {
    @objc get
  }
  @objc public static func cleanTempDirectory()
}
@objc open class AKAudioFile : AVFoundation.AVAudioFile {
  public enum BaseDirectory {
    case temp
    case documents
    case resources
    case custom
    public static func == (a: AudioKit.AKAudioFile.BaseDirectory, b: AudioKit.AKAudioFile.BaseDirectory) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  open var avAsset: AVFoundation.AVURLAsset {
    get
  }
  open var currentExportSession: AVFoundation.AVAssetExportSession?
  public typealias FloatChannelData = [[Swift.Float]]
  open var floatChannelData: AudioKit.AKAudioFile.FloatChannelData? {
    get
    set
  }
  open var pcmBuffer: AVFoundation.AVAudioPCMBuffer {
    get
    set
  }
  open var maxLevel: Swift.Float {
    get
    set
  }
  @objc override dynamic public init(forReading fileURL: Foundation.URL) throws
  @objc override dynamic public init(forReading fileURL: Foundation.URL, commonFormat format: AVFoundation.AVAudioCommonFormat, interleaved: Swift.Bool) throws
  @objc override dynamic public init(forWriting fileURL: Foundation.URL, settings: [Swift.String : Any], commonFormat format: AVFoundation.AVAudioCommonFormat, interleaved: Swift.Bool) throws
  @objc override dynamic public init(forWriting fileURL: Foundation.URL, settings: [Swift.String : Any]) throws
  @objc deinit
  @objc override dynamic public init()
}
extension AKComputedParameter {
  public func pitchShift(semitones: AudioKit.AKParameter = 0) -> AudioKit.AKOperation
}
extension AKOperation {
  public static func sineWave(frequency: AudioKit.AKParameter = 440, amplitude: AudioKit.AKParameter = 1) -> AudioKit.AKOperation
}
extension AKManager {
  @objc public static var tester: AudioKit.AKTester?
  @objc public static func test(node: AudioKit.AKNode, duration: Swift.Double, afterStart: () -> Swift.Void = {}) throws
  @objc public static func auditionTest(node: AudioKit.AKNode, duration: Swift.Double) throws
}
@objc @_inheritsConvenienceInitializers public class AKBitCrusherAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension AKAudioFile {
  convenience public init(readFileName name: Swift.String, baseDir: AudioKit.AKAudioFile.BaseDirectory = .resources) throws
  convenience public init(writeIn baseDir: AudioKit.AKAudioFile.BaseDirectory = .temp, name: Swift.String? = nil, settings: [Swift.String : Any] = AKSettings.audioFormat.settings) throws
  convenience public init(createFileFromFloats floatsArrays: [[Swift.Float]], baseDir: AudioKit.AKAudioFile.BaseDirectory = .temp, name: Swift.String = "") throws
  convenience public init(fromAVAudioPCMBuffer buffer: AVFoundation.AVAudioPCMBuffer, baseDir: AudioKit.AKAudioFile.BaseDirectory = .temp, name: Swift.String = "") throws
}
extension NSNotification.Name {
  public static let AKEngineRestartedAfterRouteChange: Foundation.Notification.Name
  public static let AKEngineRestartedAfterConfigurationChange: Foundation.Notification.Name
  public static let AKEngineStarted: Foundation.Notification.Name
}
@objc @_inheritsConvenienceInitializers public class AKMorphingOscillatorAudioUnit : AudioKit.AKGeneratorAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKAutoPanner : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKAutoPannerAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var frequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var depth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, frequency: Swift.Double = 10, depth: Swift.Double = 1.0, waveform: AudioKit.AKTable = AKTable(.positiveSine))
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKAutoPanner
}
extension AKOperation {
  public func triggeredWithEnvelope(trigger: AudioKit.AKParameter, attack: AudioKit.AKParameter = 0.1, hold: AudioKit.AKParameter = 0.3, release: AudioKit.AKParameter = 0.2) -> AudioKit.AKOperation
}
@objc open class AKThreePoleLowpassFilter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKThreePoleLowpassFilterAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let distortionRange: Swift.ClosedRange<Swift.Double>
  public static let cutoffFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let resonanceRange: Swift.ClosedRange<Swift.Double>
  public static let defaultDistortion: Swift.Double
  public static let defaultCutoffFrequency: Swift.Double
  public static let defaultResonance: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var distortion: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var cutoffFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var resonance: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, distortion: Swift.Double = defaultDistortion, cutoffFrequency: Swift.Double = defaultCutoffFrequency, resonance: Swift.Double = defaultResonance)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKThreePoleLowpassFilter
}
extension AKPlayer {
  @objc dynamic public func play(from startingTime: Swift.Double, to endingTime: Swift.Double = 0)
  @objc dynamic public func play(at audioTime: AVFoundation.AVAudioTime?)
  public func play(at audioTime: AVFoundation.AVAudioTime?, hostTime: Swift.UInt64?)
  public func play(when scheduledTime: Swift.Double, hostTime: Swift.UInt64? = nil)
  public func play(from startingTime: Swift.Double, to endingTime: Swift.Double, when scheduledTime: Swift.Double, hostTime: Swift.UInt64? = nil)
  @objc dynamic public func pause()
  @objc dynamic public func resume()
  public func fadeOutAndStop(time: Foundation.TimeInterval)
}
@objc @_inheritsConvenienceInitializers public class AKResonantFilterAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKRhodesPiano : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent {
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public typealias AKAudioUnitType = AudioKit.AKRhodesPianoAudioUnit
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var frequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var amplitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(frequency: Swift.Double = 440, amplitude: Swift.Double = 0.5)
  open func trigger(frequency: Swift.Double, amplitude: Swift.Double = 1)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKRhodesPiano
}
extension AKOperation {
  public static func randomNumberPulse(minimum: AudioKit.AKParameter = 0, maximum: AudioKit.AKParameter = 1, updateFrequency: AudioKit.AKParameter = 10) -> AudioKit.AKOperation
}
@objc @_inheritsConvenienceInitializers public class AKBandPassButterworthFilterAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
open class AKStereoOperation : AudioKit.AKComputedParameter {
  open var description: Swift.String {
    get
  }
  open func toMono() -> AudioKit.AKOperation
  open func left() -> AudioKit.AKOperation
  open func right() -> AudioKit.AKOperation
  open func toStereo() -> AudioKit.AKStereoOperation
  public static var input: AudioKit.AKStereoOperation
  public init(_ operationString: Swift.String)
  public init(module: Swift.String, setup: Swift.String = "", inputs: AudioKit.AKParameter...)
  @objc deinit
}
@objc public protocol AKTiming {
  @objc func start(at audioTime: AVFoundation.AVAudioTime?)
  @objc func stop()
  @objc var isStarted: Swift.Bool { get }
  @objc func setPosition(_ position: Swift.Double)
  @objc(positionAtAudioTime:) func position(at audioTime: AVFoundation.AVAudioTime?) -> Swift.Double
  @objc(audioTimeAtPosition:) func audioTime(at position: Swift.Double) -> AVFoundation.AVAudioTime?
  @objc optional func prepare()
}
extension AKTiming {
  public static func syncStart(_ nodes: [AudioKit.AKTiming], at position: Swift.Double = 0) -> AVFoundation.AVAudioTime
  public func synchronizeWith(other: AudioKit.AKTiming, at audioTime: AVFoundation.AVAudioTime? = nil)
}
@objc open class AKNodeTiming : ObjectiveC.NSObject {
  weak open var node: AudioKit.AKOutput?
  open var currentTime: Swift.Double {
    get
    set
  }
  open func start()
  @objc open func stop()
  public init(node: AudioKit.AKOutput)
  @objc deinit
  @objc override dynamic public init()
}
extension AKNodeTiming : AudioKit.AKTiming {
  @objc dynamic public var isStarted: Swift.Bool {
    @objc get
  }
  public var isNotStarted: Swift.Bool {
    get
  }
  @objc dynamic open func position(at audioTime: AVFoundation.AVAudioTime?) -> Swift.Double
  @objc dynamic open func audioTime(at position: Swift.Double) -> AVFoundation.AVAudioTime?
  @objc dynamic open func start(at audioTime: AVFoundation.AVAudioTime?)
  @objc dynamic open func setPosition(_ position: Swift.Double)
}
public typealias DeviceID = Swift.String
@objc open class AKDevice : ObjectiveC.NSObject {
  open var name: Swift.String
  open var nInputChannels: Swift.Int?
  open var nOutputChannels: Swift.Int?
  open var deviceID: AudioKit.DeviceID {
    get
  }
  public init(name: Swift.String, deviceID: AudioKit.DeviceID, dataSource: Swift.String = "")
  convenience public init(portDescription: AVFoundation.AVAudioSessionPortDescription)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AKPhaseLockedVocoderAudioUnit : AudioKit.AKGeneratorAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKCompressor : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKInput {
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var threshold: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var headRoom: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var attackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var releaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var compressionAmount: Swift.Double {
    @objc get
  }
  @objc dynamic open var inputAmplitude: Swift.Double {
    @objc get
  }
  @objc dynamic open var outputAmplitude: Swift.Double {
    @objc get
  }
  @objc dynamic open var masterGain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var dryWetMix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool
  @objc public init(_ input: AudioKit.AKNode? = nil, threshold: Swift.Double = -20, headRoom: Swift.Double = 5, attackDuration: Swift.Double = 0.001, releaseDuration: Swift.Double = 0.05, masterGain: Swift.Double = 0)
  public var inputNode: AVFoundation.AVAudioNode {
    get
  }
  @objc open func start()
  @objc open func stop()
  override open func detach()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKCompressor
}
extension AKComputedParameter {
  public func threePoleLowPassFilter(distortion: AudioKit.AKParameter = 0.5, cutoffFrequency: AudioKit.AKParameter = 1_500, resonance: AudioKit.AKParameter = 0.5) -> AudioKit.AKOperation
}
@objc open class AKTuningTableETNN : ObjectiveC.NSObject {
  @objc public var nn: AudioKit.MIDINoteNumber
  @objc public var pitchBend: Swift.Int
  public init(_ nn: AudioKit.MIDINoteNumber = 60, _ pb: Swift.Int = 16_384 / 2)
  @objc deinit
  @objc override dynamic public init()
}
@objc open class AKTuningTableDelta12ET : ObjectiveC.NSObject {
  @objc public var nn: AudioKit.MIDINoteNumber
  @objc public var cents: Swift.Double
  public init(_ nn: AudioKit.MIDINoteNumber = 60, _ cents: Swift.Double = 0)
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers open class AKTuningTable : AudioKit.AKTuningTableBase {
  @objc public var masterSet: [AudioKit.AKTuningTable.Frequency] {
    get
  }
  @objc public var middleCNoteNumber: AudioKit.MIDINoteNumber {
    @objc get
    @objc set
  }
  @objc public var middleCFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var middleCOctave: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var etNNPitchBendRangeDown: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var etNNPitchBendRangeUp: Swift.Double {
    @objc get
    @objc set
  }
  @objc public func etNNPitchBend(NN nn: AudioKit.MIDINoteNumber) -> AudioKit.AKTuningTableETNN?
  @objc public func delta12ET(NN nn: AudioKit.MIDINoteNumber) -> AudioKit.AKTuningTableDelta12ET?
  @objc override public var npo: Swift.Int {
    @objc get
  }
  @objc override dynamic public init()
  @discardableResult
  @objc public func tuningTable(fromFrequencies inputMasterSet: [AudioKit.AKTuningTable.Frequency]) -> Swift.Int
  @objc open func tuning12ETDeviation(centsArray: [AudioKit.AKTuningTable.Cents])
  @objc public func masterSetInCents() -> [AudioKit.AKTuningTable.Cents]
  @objc deinit
}
@objc open class AKMorphingOscillatorFilterSynth : AudioKit.AKPolyphonicNode, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKMorphingOscillatorFilterSynthAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  open var waveformArray: [AudioKit.AKTable] {
    get
    set
  }
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var index: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var attackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var decayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var sustainLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var releaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pitchBend: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoDepth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoRate: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterCutoffFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterResonance: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterAttackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterDecayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterSustainLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterReleaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterEnvelopeStrength: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterLFODepth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterLFORate: Swift.Double {
    @objc get
    @objc set
  }
  @objc convenience override dynamic public init()
  @objc public init(waveformArray: [AudioKit.AKTable], index: Swift.Double = 0, attackDuration: Swift.Double = 0.1, decayDuration: Swift.Double = 0.1, sustainLevel: Swift.Double = 1.0, releaseDuration: Swift.Double = 0.1, pitchBend: Swift.Double = 0, vibratoDepth: Swift.Double = 0, vibratoRate: Swift.Double = 0, filterCutoffFrequency: Swift.Double = 22_050.0, filterResonance: Swift.Double = 0.0, filterAttackDuration: Swift.Double = 0.1, filterDecayDuration: Swift.Double = 0.1, filterSustainLevel: Swift.Double = 1.0, filterReleaseDuration: Swift.Double = 1.0, filterEnvelopeStrength: Swift.Double = 0.0, filterLFODepth: Swift.Double = 0.0, filterLFORate: Swift.Double = 0.0)
  open func reset()
  @objc override open func play(noteNumber: AudioKit.MIDINoteNumber, velocity: AudioKit.MIDIVelocity, frequency: Swift.Double, channel: AudioKit.MIDIChannel = 0)
  @objc override open func stop(noteNumber: AudioKit.MIDINoteNumber)
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKMorphingOscillatorFilterSynth
}
@objc open class AKPhaseDistortionOscillator : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKPhaseDistortionOscillatorAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let frequencyRange: Swift.ClosedRange<Swift.Double>
  public static let amplitudeRange: Swift.ClosedRange<Swift.Double>
  public static let phaseDistortionRange: Swift.ClosedRange<Swift.Double>
  public static let detuningOffsetRange: Swift.ClosedRange<Swift.Double>
  public static let detuningMultiplierRange: Swift.ClosedRange<Swift.Double>
  public static let defaultFrequency: Swift.Double
  public static let defaultAmplitude: Swift.Double
  public static let defaultPhaseDistortion: Swift.Double
  public static let defaultDetuningOffset: Swift.Double
  public static let defaultDetuningMultiplier: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var frequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var amplitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var phaseDistortion: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var detuningOffset: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var detuningMultiplier: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc convenience override dynamic public init()
  @objc public init(waveform: AudioKit.AKTable, frequency: Swift.Double = defaultFrequency, amplitude: Swift.Double = defaultAmplitude, phaseDistortion: Swift.Double = defaultPhaseDistortion, detuningOffset: Swift.Double = defaultDetuningOffset, detuningMultiplier: Swift.Double = defaultDetuningMultiplier)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKPhaseDistortionOscillator
}
@objc public class AKPeriodicFunction : AudioKit.AKOperationGenerator {
  @objc public init(every period: Swift.Double, handler: @escaping () -> Swift.Void)
  convenience public init(frequency: Swift.Double, handler: @escaping () -> Swift.Void)
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(sporth: Swift.String, customUgens: [AudioKit.AKCustomUgen] = super)
}
@objc open class AKAudioPlayer : AudioKit.AKNode, AudioKit.AKToggleable {
  @objc dynamic open var audioFileBuffer: AVFoundation.AVAudioPCMBuffer? {
    @objc get
    @objc set
  }
  @objc dynamic open var completionHandler: AudioKit.AKCallback?
  @objc dynamic open var looping: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic open var reversed: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic open var fadeInTime: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var fadeOutTime: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var audioFile: AudioKit.AKAudioFile {
    @objc get
  }
  @objc dynamic open var path: Swift.String {
    @objc get
  }
  @objc dynamic open var duration: Swift.Double {
    @objc get
  }
  @objc dynamic open var volume: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc dynamic open var currentTime: Swift.Double {
    @objc get
  }
  @objc dynamic open var playhead: Swift.Double {
    @objc get
  }
  @objc dynamic open var pan: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var startTime: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var endTime: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var scheduledTime: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var scheduledAVTime: AVFoundation.AVAudioTime?
  @objc public init(file: AudioKit.AKAudioFile, looping: Swift.Bool = false, lazyBuffering: Swift.Bool = false, completionHandler: AudioKit.AKCallback? = nil) throws
  @objc open func start()
  open func play(at when: AVFoundation.AVAudioTime?)
  @objc open func stop()
  open func pause()
  open func resume()
  open func reloadFile() throws
  @objc open func replace(file: AudioKit.AKAudioFile) throws
  open func play()
  @objc open func play(from startTime: Swift.Double)
  @objc open func play(from startTime: Swift.Double, to endTime: Swift.Double)
  open func play(from startTime: Swift.Double, to endTime: Swift.Double, when scheduledTime: Swift.Double)
  open func play(from startTime: Swift.Double, to endTime: Swift.Double, avTime: AVFoundation.AVAudioTime?)
  open func schedule(from startTime: Swift.Double, to endTime: Swift.Double, avTime: AVFoundation.AVAudioTime?)
  open func getPeakTime() -> Swift.Double
  open class func secondsToAVAudioTime(hostTime: Swift.UInt64, time: Swift.Double) -> AVFoundation.AVAudioTime
  @objc open func stopAtNextLoopEnd()
  override open func detach()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
}
@objc @_inheritsConvenienceInitializers public class AKWhiteNoiseAudioUnit : AudioKit.AKGeneratorAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKWhiteNoise : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKWhiteNoiseAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let amplitudeRange: Swift.ClosedRange<Swift.Double>
  public static let defaultAmplitude: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var amplitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(amplitude: Swift.Double = defaultAmplitude)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKWhiteNoise
}
@objc @_inheritsConvenienceInitializers public class AKPluckedStringAudioUnit : AudioKit.AKGeneratorAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc public protocol AKAutomatable : AnyObject {
  @objc var parameterAutomation: AudioKit.AKParameterAutomation? { get }
  @objc func startAutomation(at audioTime: AVFoundation.AVAudioTime?, duration: AVFoundation.AVAudioTime?)
  @objc func stopAutomation()
}
extension AKOperation {
  public static func pinkNoise(amplitude: AudioKit.AKParameter = 1.0) -> AudioKit.AKOperation
}
@objc @_inheritsConvenienceInitializers public class AKBandRejectButterworthFilterAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AKMoogLadderAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension AKTuningTable {
  @objc dynamic public func momentOfSymmetry(generator gInput: Swift.Double = 7.0 / 12.0, level lInput: Swift.Int = 5, murchana mInput: Swift.Int = 0) -> Swift.Int
}
extension AKOperation {
  public static func brownianNoise(amplitude: AudioKit.AKParameter = 1.0) -> AudioKit.AKOperation
}
@objc @_inheritsConvenienceInitializers public class AKFlangerAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKFlatFrequencyResponseReverb : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKFlatFrequencyResponseReverbAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let reverbDurationRange: Swift.ClosedRange<Swift.Double>
  public static let defaultReverbDuration: Swift.Double
  public static let defaultLoopDuration: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var reverbDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, reverbDuration: Swift.Double = defaultReverbDuration, loopDuration: Swift.Double = defaultLoopDuration)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKFlatFrequencyResponseReverb
}
@objc open class AKCostelloReverb : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKCostelloReverbAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let feedbackRange: Swift.ClosedRange<Swift.Double>
  public static let cutoffFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let defaultFeedback: Swift.Double
  public static let defaultCutoffFrequency: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var feedback: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var cutoffFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, feedback: Swift.Double = defaultFeedback, cutoffFrequency: Swift.Double = defaultCutoffFrequency)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKCostelloReverb
}
@objc @_inheritsConvenienceInitializers public class AKOscillatorAudioUnit : AudioKit.AKGeneratorAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKBooster : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKBoosterAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var rampType: AudioKit.AKSettings.RampType {
    @objc get
    @objc set
  }
  @objc dynamic open var gain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var leftGain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var rightGain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var dB: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, gain: Swift.Double = 1)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKBooster
}
extension AKTuningTable {
  public func defaultTuning() -> Swift.Int
  public func twelveToneEqualTemperament() -> Swift.Int
  public func thirtyOneEqualTemperament() -> Swift.Int
  public func equalTemperament(notesPerOctave npo: Swift.Int) -> Swift.Int
}
extension OpaquePointer {
  public func getValue<T>(forProperty property: AudioToolbox.AudioUnitPropertyID) throws -> T
  public func setValue<T>(value: T, forProperty property: AudioToolbox.AudioUnitPropertyID) throws
  public func add(listener: AudioKit.AudioUnitPropertyListener, toProperty property: AudioToolbox.AudioUnitPropertyID) throws
  public func remove(listener: AudioKit.AudioUnitPropertyListener, fromProperty property: AudioToolbox.AudioUnitPropertyID)
}
public struct AudioUnitPropertyListener {
  public typealias AudioUnitPropertyListenerCallback = (AudioToolbox.AudioUnit, AudioToolbox.AudioUnitPropertyID) -> Swift.Void
  public init(callback: @escaping AudioKit.AudioUnitPropertyListener.AudioUnitPropertyListenerCallback)
}
extension OpaquePointer {
  public func getPropertyInfo(propertyID: AudioToolbox.AudioUnitPropertyID) throws -> (dataSize: Swift.UInt32, writable: Swift.Bool)
  public func getProperty<T>(propertyID: AudioToolbox.AudioUnitPropertyID, dataSize: Swift.UInt32) throws -> T
  public func setProperty<T>(propertyID: AudioToolbox.AudioUnitPropertyID, dataSize: Swift.UInt32, data: T) throws
}
extension Int32 {
  public func check() throws
}
@objc open class AKConvolution : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKConvolutionAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, impulseResponseFileURL: Foundation.URL, partitionLength: Swift.Int = 2_048)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKConvolution
}
@objc open class AKConverter : ObjectiveC.NSObject {
  public typealias AKConverterCallback = (Swift.Error?) -> Swift.Void
  public static let outputFormats: [Swift.String]
  public static let inputFormats: [Swift.String]
  public struct Options {
    public init()
    public var format: Swift.String?
    public var sampleRate: Swift.Double?
    public var bitDepth: Swift.UInt32?
    public var bitRate: Swift.UInt32 {
      get
      set
    }
    public var channels: Swift.UInt32?
    public var isInterleaved: Swift.Bool?
    public var eraseFile: Swift.Bool
  }
  open var inputURL: Foundation.URL?
  open var outputURL: Foundation.URL?
  open var options: AudioKit.AKConverter.Options?
  public init(inputURL: Foundation.URL, outputURL: Foundation.URL, options: AudioKit.AKConverter.Options? = nil)
  open func start(completionHandler: AudioKit.AKConverter.AKConverterCallback? = nil)
  @objc deinit
  @objc override dynamic public init()
}
@objc open class AKMandolin : AudioKit.AKNode, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKMandolinAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var detune: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var bodySize: Swift.Double {
    @objc get
    @objc set
  }
  @objc public init(detune: Swift.Double = 1, bodySize: Swift.Double = 1)
  open func prepareChord(_ course1Note: AudioKit.MIDINoteNumber, _ course2Note: AudioKit.MIDINoteNumber, _ course3Note: AudioKit.MIDINoteNumber, _ course4Note: AudioKit.MIDINoteNumber)
  open func fret(noteNumber: AudioKit.MIDINoteNumber, course: Swift.Int)
  open func pluck(course: Swift.Int, position: Swift.Double, velocity: AudioKit.MIDIVelocity)
  @objc open func strum(_ position: Swift.Double, velocity: AudioKit.MIDIVelocity)
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKMandolin
}
extension AKOperation {
  public static func pluckedString(trigger: AudioKit.AKOperation, frequency: AudioKit.AKParameter = 110, amplitude: AudioKit.AKParameter = 0.5, lowestFrequency: Swift.Double = 110) -> AudioKit.AKOperation
}
@objc open class AKSampler : AudioKit.AKPolyphonicNode, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKSamplerAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc public var internalAU: AudioKit.AKSampler.AKAudioUnitType?
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var masterVolume: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pitchBend: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoDepth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var voiceVibratoDepth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var voiceVibratoFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterCutoff: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterStrength: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterResonance: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var glideRate: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var attackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var holdDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var decayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var sustainLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var releaseHoldDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var releaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterAttackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterDecayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterSustainLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterReleaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pitchAttackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pitchDecayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pitchSustainLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pitchReleaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pitchADSRSemitones: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var restartVoiceLFO: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic open var filterEnable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic open var loopThruRelease: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic open var isMonophonic: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic open var isLegato: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic open var keyTrackingFraction: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterEnvelopeVelocityScaling: Swift.Double {
    @objc get
    @objc set
  }
  @objc public init(masterVolume: Swift.Double = 1.0, pitchBend: Swift.Double = 0.0, vibratoDepth: Swift.Double = 0.0, vibratoFrequency: Swift.Double = 5.0, voiceVibratoDepth: Swift.Double = 0.0, voiceVibratoFrequency: Swift.Double = 5.0, filterCutoff: Swift.Double = 4.0, filterStrength: Swift.Double = 20.0, filterResonance: Swift.Double = 0.0, attackDuration: Swift.Double = 0.0, holdDuration: Swift.Double = 0.0, decayDuration: Swift.Double = 0.0, sustainLevel: Swift.Double = 1.0, releaseHoldDuration: Swift.Double = 0.0, releaseDuration: Swift.Double = 0.0, restartVoiceLFO: Swift.Bool = false, filterEnable: Swift.Bool = false, filterAttackDuration: Swift.Double = 0.0, filterDecayDuration: Swift.Double = 0.0, filterSustainLevel: Swift.Double = 1.0, filterReleaseDuration: Swift.Double = 0.0, pitchAttackDuration: Swift.Double = 0.0, pitchDecayDuration: Swift.Double = 0.0, pitchSustainLevel: Swift.Double = 0.0, pitchReleaseDuration: Swift.Double = 0.0, pitchADSRSemitones: Swift.Double = 0.0, glideRate: Swift.Double = 0.0, loopThruRelease: Swift.Bool = true, isMonophonic: Swift.Bool = false, isLegato: Swift.Bool = false, keyTracking: Swift.Double = 1.0, filterEnvelopeVelocityScaling: Swift.Double = 0.0)
  @objc open func loadAKAudioFile(from sampleDescriptor: AudioKit.AKSampleDescriptor, file: AudioKit.AKAudioFile)
  @objc open func stopAllVoices()
  @objc open func restartVoices()
  @objc open func loadRawSampleData(from sampleDataDescriptor: AudioKit.AKSampleDataDescriptor)
  @objc open func loadCompressedSampleFile(from sampleFileDescriptor: AudioKit.AKSampleFileDescriptor)
  @objc open func unloadAllSamples()
  @objc open func setNoteFrequency(noteNumber: AudioKit.MIDINoteNumber, frequency: Swift.Double)
  @objc open func buildSimpleKeyMap()
  @objc open func buildKeyMap()
  @objc open func setLoop(thruRelease: Swift.Bool)
  @objc override open func play(noteNumber: AudioKit.MIDINoteNumber, velocity: AudioKit.MIDIVelocity, channel: AudioKit.MIDIChannel = 0)
  @objc override open func stop(noteNumber: AudioKit.MIDINoteNumber)
  @objc open func silence(noteNumber: AudioKit.MIDINoteNumber)
  @objc open func sustainPedal(pedalDown: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKSampler
}
@objc open class AKDecimator : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKInput {
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var decimation: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var rounding: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var mix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool
  @objc public init(_ input: AudioKit.AKNode? = nil, decimation: Swift.Double = 0.5, rounding: Swift.Double = 0, mix: Swift.Double = 1)
  @objc open func start()
  @objc open func stop()
  override open func detach()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKDecimator
}
@objc @_inheritsConvenienceInitializers public class AKPWMOscillatorAudioUnit : AudioKit.AKGeneratorAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKTester : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKTesterAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  open var MD5: Swift.String {
    get
  }
  @objc open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode?, samples: Swift.Int)
  @objc open func start()
  @objc open func stop()
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  @objc deinit
  public typealias _Self = AudioKit.AKTester
}
@objc @_inheritsConvenienceInitializers public class AKStereoDelayAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension AKOperation {
  public static func fmOscillator(baseFrequency: AudioKit.AKParameter = 440, carrierMultiplier: AudioKit.AKParameter = 1.0, modulatingMultiplier: AudioKit.AKParameter = 1.0, modulationIndex: AudioKit.AKParameter = 1.0, amplitude: AudioKit.AKParameter = 0.5) -> AudioKit.AKOperation
}
extension AVAudioTime {
  open func extrapolateTimeShimmed(fromAnchor anchorTime: AVFoundation.AVAudioTime) -> AVFoundation.AVAudioTime
  public static func now() -> AVFoundation.AVAudioTime
  open func offset(seconds: Swift.Double) -> AVFoundation.AVAudioTime
  open func timeIntervalSince(otherTime: AVFoundation.AVAudioTime) -> Swift.Double?
  open func toSeconds(hostTime time: Swift.UInt64) -> Swift.Double
  open class func secondsToAudioTime(hostTime: Swift.UInt64, time: Swift.Double) -> AVFoundation.AVAudioTime
}
public func + (left: AVFoundation.AVAudioTime, right: Swift.Double) -> AVFoundation.AVAudioTime
public func + (left: AVFoundation.AVAudioTime, right: Swift.Int) -> AVFoundation.AVAudioTime
public func - (left: AVFoundation.AVAudioTime, right: Swift.Double) -> AVFoundation.AVAudioTime
public func - (left: AVFoundation.AVAudioTime, right: Swift.Int) -> AVFoundation.AVAudioTime
@objc @_inheritsConvenienceInitializers public class AKCostelloReverbAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKFormantFilter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKFormantFilterAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let centerFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let attackDurationRange: Swift.ClosedRange<Swift.Double>
  public static let decayDurationRange: Swift.ClosedRange<Swift.Double>
  public static let defaultCenterFrequency: Swift.Double
  public static let defaultAttackDuration: Swift.Double
  public static let defaultDecayDuration: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var centerFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var attackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var decayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, centerFrequency: Swift.Double = defaultCenterFrequency, attackDuration: Swift.Double = defaultAttackDuration, decayDuration: Swift.Double = defaultDecayDuration)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKFormantFilter
}
@objc open class AKEqualizerFilter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKEqualizerFilterAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let centerFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let bandwidthRange: Swift.ClosedRange<Swift.Double>
  public static let gainRange: Swift.ClosedRange<Swift.Double>
  public static let defaultCenterFrequency: Swift.Double
  public static let defaultBandwidth: Swift.Double
  public static let defaultGain: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var centerFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var bandwidth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var gain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, centerFrequency: Swift.Double = defaultCenterFrequency, bandwidth: Swift.Double = defaultBandwidth, gain: Swift.Double = defaultGain)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKEqualizerFilter
}
@objc @_inheritsConvenienceInitializers public class AKVariableDelayAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKAmplitudeEnvelope : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKAmplitudeEnvelopeAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let attackDurationRange: Swift.ClosedRange<Swift.Double>
  public static let decayDurationRange: Swift.ClosedRange<Swift.Double>
  public static let sustainLevelRange: Swift.ClosedRange<Swift.Double>
  public static let releaseDurationRange: Swift.ClosedRange<Swift.Double>
  public static let defaultAttackDuration: Swift.Double
  public static let defaultDecayDuration: Swift.Double
  public static let defaultSustainLevel: Swift.Double
  public static let defaultReleaseDuration: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var attackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var decayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var sustainLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var releaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, attackDuration: Swift.Double = defaultAttackDuration, decayDuration: Swift.Double = defaultDecayDuration, sustainLevel: Swift.Double = defaultSustainLevel, releaseDuration: Swift.Double = defaultReleaseDuration)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKAmplitudeEnvelope
}
extension AKTuningTable {
  @objc dynamic public func presetHighlandBagPipes() -> Swift.Int
  @objc dynamic public func presetDiaphonicTetrachord() -> Swift.Int
}
@objc @_inheritsConvenienceInitializers public class AKPhaseDistortionOscillatorAudioUnit : AudioKit.AKGeneratorAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension AKAudioFile {
  public func normalized(baseDir: AudioKit.AKAudioFile.BaseDirectory = .temp, name: Swift.String = UUID().uuidString, newMaxLevel: Swift.Float = 0.0) throws -> AudioKit.AKAudioFile
  public func reversed(baseDir: AudioKit.AKAudioFile.BaseDirectory = .temp, name: Swift.String = UUID().uuidString) throws -> AudioKit.AKAudioFile
  public func appendedBy(file: AudioKit.AKAudioFile, baseDir: AudioKit.AKAudioFile.BaseDirectory = .temp, name: Swift.String = UUID().uuidString) throws -> AudioKit.AKAudioFile
  public func extracted(fromSample: Swift.Int64 = 0, toSample: Swift.Int64 = 0, baseDir: AudioKit.AKAudioFile.BaseDirectory = .temp, name: Swift.String = UUID().uuidString) throws -> AudioKit.AKAudioFile
}
@objc open class AKNodeRecorder : ObjectiveC.NSObject {
  public var node: AudioKit.AKNode? {
    get
  }
  @objc dynamic public var isRecording: Swift.Bool {
    get
  }
  @objc open var durationToRecord: Swift.Double
  @objc open var recordedDuration: Swift.Double {
    @objc get
  }
  open var recordFormat: AVFoundation.AVAudioFormat?
  @objc open var audioFile: AudioKit.AKAudioFile? {
    @objc get
  }
  @objc public init(node: AudioKit.AKNode? = AKManager.output, file: AudioKit.AKAudioFile? = nil, bus: Swift.Int = 0) throws
  @objc open func record() throws
  @objc open func stop()
  @objc open func reset() throws
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class AKPhaserAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
public func CheckError(_ error: Darwin.OSStatus)
extension AKCostelloReverb {
  public func presetShortTailCostelloReverb()
  public func presetLowRingingLongTailCostelloReverb()
  public func printCurrentValuesAsPreset()
}
extension AKComputedParameter {
  public func variableDelay(time: AudioKit.AKParameter = 1.0, feedback: AudioKit.AKParameter = 0.0, maximumDelayTime: Swift.Double = 5.0) -> AudioKit.AKOperation
}
extension AKOperation {
  public func plus(_ parameter: AudioKit.AKParameter) -> AudioKit.AKOperation
  public func offsetBy(_ parameter: AudioKit.AKParameter) -> AudioKit.AKOperation
}
public func + (left: AudioKit.AKParameter, right: AudioKit.AKParameter) -> AudioKit.AKOperation
extension AKStereoOperation {
  public static func + (first: AudioKit.AKStereoOperation, second: AudioKit.AKStereoOperation) -> AudioKit.AKStereoOperation
}
@objc open class AKResonantFilter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKResonantFilterAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let frequencyRange: Swift.ClosedRange<Swift.Double>
  public static let bandwidthRange: Swift.ClosedRange<Swift.Double>
  public static let defaultFrequency: Swift.Double
  public static let defaultBandwidth: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var frequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var bandwidth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, frequency: Swift.Double = defaultFrequency, bandwidth: Swift.Double = defaultBandwidth)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKResonantFilter
}
@objc open class AKDiskStreamer : AudioKit.AKNode, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKDiskStreamerAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var rate: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var volume: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var loopEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  open var size: AudioKit.Sample {
    get
  }
  open var originalSampleRate: Swift.Double? {
    get
  }
  open var normalizedPosition: Swift.Double {
    get
  }
  open var position: Swift.Double {
    get
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  open var loadCompletionHandler: () -> Swift.Void {
    get
    set
  }
  open var completionHandler: () -> Swift.Void {
    get
    set
  }
  open var loadedFile: AudioKit.AKAudioFile?
  @objc public init(volume: Swift.Double = 1, completionHandler: @escaping AudioKit.AKCCallback = {}, loadCompletionHandler: @escaping AudioKit.AKCCallback = {})
  @objc open func start()
  @objc open func stop()
  open func play()
  open func load(file: AudioKit.AKAudioFile)
  open func rewind()
  open func seek(to sample: Swift.Double)
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKDiskStreamer
}
@objc @_inheritsConvenienceInitializers public class AKDynamicRangeCompressorAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
public class AKAmplitudeTap : AudioKit.AKToggleable {
  public var bufferSize: Swift.UInt32 {
    get
  }
  @objc public var isStarted: Swift.Bool {
    get
  }
  public var bus: Swift.Int {
    get
    set
  }
  public var input: AudioKit.AKNode? {
    get
    set
  }
  public var amplitude: Swift.Float {
    get
  }
  public var leftAmplitude: Swift.Float {
    get
  }
  public var rightAmplitude: Swift.Float {
    get
  }
  @objc public init(_ input: AudioKit.AKNode?, bufferSize: Swift.UInt32 = 1_024)
  @objc public func start()
  @objc public func stop()
  public func dispose()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AKKorgLowPassFilterAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKChorus : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKChorusAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let frequencyRange: Swift.ClosedRange<Swift.Double>
  public static let depthRange: Swift.ClosedRange<Swift.Double>
  public static let feedbackRange: Swift.ClosedRange<Swift.Double>
  public static let dryWetMixRange: Swift.ClosedRange<Swift.Double>
  public static let defaultFrequency: Swift.Double
  public static let defaultDepth: Swift.Double
  public static let defaultFeedback: Swift.Double
  public static let defaultDryWetMix: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var frequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var depth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var feedback: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var dryWetMix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, frequency: Swift.Double = defaultFrequency, depth: Swift.Double = defaultDepth, feedback: Swift.Double = defaultFeedback, dryWetMix: Swift.Double = defaultDryWetMix)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKChorus
}
@objc open class AKToneFilter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKToneFilterAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let halfPowerPointRange: Swift.ClosedRange<Swift.Double>
  public static let defaultHalfPowerPoint: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var halfPowerPoint: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, halfPowerPoint: Swift.Double = defaultHalfPowerPoint)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKToneFilter
}
@objc open class AKClarinet : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKClarinetAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var frequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var amplitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(frequency: Swift.Double = 440, amplitude: Swift.Double = 0.5)
  open func trigger()
  open func trigger(frequency: Swift.Double, amplitude: Swift.Double = 1)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKClarinet
}
extension AKOperation {
  public static func triangleWave(frequency: AudioKit.AKParameter = 440, amplitude: AudioKit.AKParameter = 0.5) -> AudioKit.AKOperation
}
@objc open class AKTimePitch : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKInput {
  @objc dynamic open var rate: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc dynamic open var pitch: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var overlap: Swift.Double {
    @objc get
    @objc set
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, rate: Swift.Double = 1.0, pitch: Swift.Double = 0.0, overlap: Swift.Double = 8.0)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
}
@objc open class AKFMOscillatorBank : AudioKit.AKPolyphonicNode, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKFMOscillatorBankAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  open var waveform: AudioKit.AKTable? {
    get
    set
  }
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var carrierMultiplier: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var modulatingMultiplier: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var modulationIndex: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var attackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var decayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var sustainLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var releaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pitchBend: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoDepth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoRate: Swift.Double {
    @objc get
    @objc set
  }
  @objc convenience override dynamic public init()
  @objc public init(waveform: AudioKit.AKTable, carrierMultiplier: Swift.Double = 1, modulatingMultiplier: Swift.Double = 1, modulationIndex: Swift.Double = 1, attackDuration: Swift.Double = 0.1, decayDuration: Swift.Double = 0.1, sustainLevel: Swift.Double = 1, releaseDuration: Swift.Double = 0.1, pitchBend: Swift.Double = 0, vibratoDepth: Swift.Double = 0, vibratoRate: Swift.Double = 0)
  @objc override open func play(noteNumber: AudioKit.MIDINoteNumber, velocity: AudioKit.MIDIVelocity, frequency: Swift.Double, channel: AudioKit.MIDIChannel = 0)
  @objc override open func stop(noteNumber: AudioKit.MIDINoteNumber)
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKFMOscillatorBank
}
@objc @_inheritsConvenienceInitializers public class AKConvolutionAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension AKOperation {
  public static func phasor(frequency: AudioKit.AKParameter = 1, phase: Swift.Double = 0) -> AudioKit.AKOperation
}
extension AKComputedParameter {
  public func highPassButterworthFilter(cutoffFrequency: AudioKit.AKParameter = 500) -> AudioKit.AKComputedParameter
}
extension AKTuningTable {
  @discardableResult
  public func presetRecurrenceRelation01() -> Swift.Int
}
@objc @_inheritsConvenienceInitializers open class AKTuningTableBase : ObjectiveC.NSObject {
  public typealias Frequency = Swift.Double
  public typealias Cents = Swift.Double
  public static let NYQUIST: Swift.Double
  @objc public static let midiNoteCount: Swift.Int
  @objc override dynamic public init()
  @objc public var npo: Swift.Int {
    @objc get
  }
  @objc public func frequency(forNoteNumber noteNumber: AudioKit.MIDINoteNumber) -> AudioKit.AKTuningTableBase.Frequency
  @objc public func setFrequency(_ frequency: AudioKit.AKTuningTableBase.Frequency, at noteNumber: AudioKit.MIDINoteNumber)
  @objc deinit
}
@objc open class AKBandPassButterworthFilter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKBandPassButterworthFilterAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let centerFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let bandwidthRange: Swift.ClosedRange<Swift.Double>
  public static let defaultCenterFrequency: Swift.Double
  public static let defaultBandwidth: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var centerFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var bandwidth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, centerFrequency: Swift.Double = defaultCenterFrequency, bandwidth: Swift.Double = defaultBandwidth)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKBandPassButterworthFilter
}
@objc open class AKDrip : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKDripAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let intensityRange: Swift.ClosedRange<Swift.Double>
  public static let dampingFactorRange: Swift.ClosedRange<Swift.Double>
  public static let energyReturnRange: Swift.ClosedRange<Swift.Double>
  public static let mainResonantFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let firstResonantFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let secondResonantFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let amplitudeRange: Swift.ClosedRange<Swift.Double>
  public static let defaultIntensity: Swift.Double
  public static let defaultDampingFactor: Swift.Double
  public static let defaultEnergyReturn: Swift.Double
  public static let defaultMainResonantFrequency: Swift.Double
  public static let defaultFirstResonantFrequency: Swift.Double
  public static let defaultSecondResonantFrequency: Swift.Double
  public static let defaultAmplitude: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var intensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var dampingFactor: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var energyReturn: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var mainResonantFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var firstResonantFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var secondResonantFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var amplitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @available(*, deprecated, message: "The physical model is inherently unstable and unpredictable, use at your own risk/discrertion.")
  @objc public init(intensity: Swift.Double = 10, dampingFactor: Swift.Double = defaultDampingFactor, energyReturn: Swift.Double = defaultEnergyReturn, mainResonantFrequency: Swift.Double = defaultMainResonantFrequency, firstResonantFrequency: Swift.Double = defaultFirstResonantFrequency, secondResonantFrequency: Swift.Double = defaultSecondResonantFrequency, amplitude: Swift.Double = defaultAmplitude)
  open func trigger()
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKDrip
}
extension AKComputedParameter {
  public func reverberateWithCostello(feedback: AudioKit.AKParameter = 0.6, cutoffFrequency: AudioKit.AKParameter = 4_000) -> AudioKit.AKStereoOperation
}
@objc open class AKVariSpeed : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKInput {
  @objc dynamic open var rate: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, rate: Swift.Double = 1.0)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
}
@objc open class AKStringResonator : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKStringResonatorAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let fundamentalFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let feedbackRange: Swift.ClosedRange<Swift.Double>
  public static let defaultFundamentalFrequency: Swift.Double
  public static let defaultFeedback: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var fundamentalFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var feedback: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, fundamentalFrequency: Swift.Double = defaultFundamentalFrequency, feedback: Swift.Double = defaultFeedback)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKStringResonator
}
@objc open class AKPluckedString : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKPluckedStringAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let frequencyRange: Swift.ClosedRange<Swift.Double>
  public static let amplitudeRange: Swift.ClosedRange<Swift.Double>
  public static let defaultFrequency: Swift.Double
  public static let defaultAmplitude: Swift.Double
  public static let defaultLowestFrequency: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var frequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var amplitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(frequency: Swift.Double = defaultLowestFrequency, amplitude: Swift.Double = defaultAmplitude)
  open func trigger()
  open func trigger(frequency: Swift.Double, amplitude: Swift.Double = 1)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKPluckedString
}
@objc @_inheritsConvenienceInitializers open class AKAbstractPlayer : AudioKit.AKNode {
  public enum RenderingMode {
    case realtime, offline
    public static func == (a: AudioKit.AKAbstractPlayer.RenderingMode, b: AudioKit.AKAbstractPlayer.RenderingMode) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public struct Fade {
    public static var linearTaper: (in: Swift.Double, out: Swift.Double)
    public static var audioTaper: (in: Swift.Double, out: Swift.Double)
    public static var reverseAudioTaper: (in: Swift.Double, out: Swift.Double)
    public init()
    public static var minimumGain: Swift.Double
    public var maximumGain: Swift.Double
    public var inTime: Swift.Double {
      get
      set
    }
    public var inTaper: Swift.Double {
      get
      set
    }
    public var inSkew: Swift.Double
    public var outTime: Swift.Double {
      get
      set
    }
    public var outTaper: Swift.Double {
      get
      set
    }
    public var outSkew: Swift.Double
    @available(*, deprecated, message: "Removed in favor of Taper")
    public var inRampType: AudioKit.AKSettings.RampType
    @available(*, deprecated, message: "Removed in favor of Taper")
    public var outRampType: AudioKit.AKSettings.RampType
  }
  public struct Loop {
    public init()
    public var start: Swift.Double {
      get
      set
    }
    public var end: Swift.Double {
      get
      set
    }
  }
  public var renderingMode: AudioKit.AKAbstractPlayer.RenderingMode {
    get
  }
  public var fade: AudioKit.AKAbstractPlayer.Fade
  public var loop: AudioKit.AKAbstractPlayer.Loop
  @objc public var faderNode: AudioKit.AKFader?
  @available(*, deprecated, renamed: "fadeOutAndStop(with:)")
  @objc public var stopEnvelopeTime: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var gain: Swift.Double {
    @objc get
    @objc set
  }
  @objc open var startTime: Swift.Double {
    @objc get
    @objc set
  }
  @objc open var endTime: Swift.Double {
    @objc get
    @objc set
  }
  @objc open var offsetTime: Swift.Double
  @objc open var isPlaying: Swift.Bool {
    get
  }
  @objc open var isLooping: Swift.Bool
  @objc open var isFaded: Swift.Bool {
    @objc get
  }
  @objc open var duration: Swift.Double {
    @objc get
  }
  @objc open var sampleRate: Swift.Double {
    @objc get
  }
  open func initialize(restartIfPlaying: Swift.Bool = true)
  @objc open func play()
  @objc open func stop()
  public func startFader()
  public func bypassFader()
  public func resetFader()
  public func fadeOut(with time: Swift.Double, taper: Swift.Double? = nil)
  override open func detach()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
}
extension AKAbstractPlayer {
  @available(*, unavailable, renamed: "startFader")
  public func createFader()
  @available(*, unavailable, renamed: "bypassFader")
  public func removeFader()
}
extension AKComputedParameter {
  public func modalResonanceFilter(frequency: AudioKit.AKParameter = 500.0, qualityFactor: AudioKit.AKParameter = 50.0) -> AudioKit.AKOperation
}
extension AKOperation {
  public static func lineSegment(trigger: AudioKit.AKOperation, start: AudioKit.AKParameter, end: AudioKit.AKParameter, duration: AudioKit.AKParameter) -> AudioKit.AKOperation
}
extension AKOperation {
  public static func exponentialSegment(trigger: AudioKit.AKOperation, start: AudioKit.AKParameter, end: AudioKit.AKParameter, duration: AudioKit.AKParameter) -> AudioKit.AKOperation
}
@objc @_inheritsConvenienceInitializers public class AKEqualizerFilterAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AKPinkNoiseAudioUnit : AudioKit.AKGeneratorAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKFMOscillator : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKFMOscillatorAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let baseFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let carrierMultiplierRange: Swift.ClosedRange<Swift.Double>
  public static let modulatingMultiplierRange: Swift.ClosedRange<Swift.Double>
  public static let modulationIndexRange: Swift.ClosedRange<Swift.Double>
  public static let amplitudeRange: Swift.ClosedRange<Swift.Double>
  public static let defaultBaseFrequency: Swift.Double
  public static let defaultCarrierMultiplier: Swift.Double
  public static let defaultModulatingMultiplier: Swift.Double
  public static let defaultModulationIndex: Swift.Double
  public static let defaultAmplitude: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var baseFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var carrierMultiplier: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var modulatingMultiplier: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var modulationIndex: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var amplitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc convenience override dynamic public init()
  @objc public init(waveform: AudioKit.AKTable, baseFrequency: Swift.Double = defaultBaseFrequency, carrierMultiplier: Swift.Double = defaultCarrierMultiplier, modulatingMultiplier: Swift.Double = defaultModulatingMultiplier, modulationIndex: Swift.Double = defaultModulationIndex, amplitude: Swift.Double = defaultAmplitude)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKFMOscillator
}
extension AKComputedParameter {
  public func highPassFilter(halfPowerPoint: AudioKit.AKParameter = 1_000) -> AudioKit.AKOperation
}
public protocol AKComputedParameter : AudioKit.AKParameter {
}
@_hasMissingDesignatedInitializers open class AKOperation : AudioKit.AKComputedParameter {
  open var description: Swift.String {
    get
  }
  public static var leftInput: AudioKit.AKOperation
  public static var rightInput: AudioKit.AKOperation
  public static var trigger: AudioKit.AKOperation
  public static var parameters: [AudioKit.AKOperation]
  open func toMono() -> AudioKit.AKOperation
  open func abs() -> AudioKit.AKOperation
  open func floor() -> AudioKit.AKOperation
  open func fract() -> AudioKit.AKOperation
  open func log() -> AudioKit.AKOperation
  open func log10() -> AudioKit.AKOperation
  open func round() -> AudioKit.AKOperation
  open func midiNoteToFrequency() -> AudioKit.AKOperation
  public init(_ value: Swift.Double)
  public init(_ operationString: Swift.String)
  public init(module: Swift.String, setup: Swift.String = "", inputs: AudioKit.AKParameter...)
  @objc deinit
}
public func abs(_ parameter: AudioKit.AKOperation) -> AudioKit.AKOperation
public func floor(_ operation: AudioKit.AKOperation) -> AudioKit.AKOperation
public func fract(_ operation: AudioKit.AKOperation) -> AudioKit.AKOperation
public func log(_ operation: AudioKit.AKOperation) -> AudioKit.AKOperation
public func log10(_ operation: AudioKit.AKOperation) -> AudioKit.AKOperation
public func round(_ operation: AudioKit.AKOperation) -> AudioKit.AKOperation
@objc @_inheritsConvenienceInitializers public class AKCombFilterReverbAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension AKComputedParameter {
  public func pan(_ pan: AudioKit.AKParameter = 0) -> AudioKit.AKStereoOperation
  public func stereoPan(_ pan: AudioKit.AKParameter = 0) -> AudioKit.AKStereoOperation
}
@objc open class AKOperationEffect : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKOperationEffectAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc dynamic open var parameters: [Swift.Double] {
    @objc get
    @objc set
  }
  convenience public init(_ input: AudioKit.AKNode?, channelCount: Swift.Int, operations: (AudioKit.AKStereoOperation, [AudioKit.AKOperation]) -> [AudioKit.AKOperation])
  convenience public init(_ input: AudioKit.AKNode?, operation: (AudioKit.AKStereoOperation, [AudioKit.AKOperation]) -> AudioKit.AKComputedParameter)
  @objc public init(_ input: AudioKit.AKNode?, sporth: Swift.String, customUgens: [AudioKit.AKCustomUgen] = [])
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKOperationEffect
}
extension AKComputedParameter {
  public func distort(pregain: AudioKit.AKParameter = 2.0, postgain: AudioKit.AKParameter = 0.5, positiveShapeParameter: AudioKit.AKParameter = 0.0, negativeShapeParameter: AudioKit.AKParameter = 0.0) -> AudioKit.AKOperation
}
@objc open class AKAppleSampler : AudioKit.AKNode {
  public var audioFiles: [AudioKit.AKAudioFile] {
    get
    set
  }
  @objc dynamic open var samplerUnit: AVFoundation.AVAudioUnitSampler
  @objc dynamic open var tuning: Swift.Double {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc open func loadWav(_ file: Swift.String) throws
  @objc open func loadEXS24(_ file: Swift.String) throws
  @objc open func loadAudioFile(_ file: AudioKit.AKAudioFile) throws
  @objc open func loadAudioFiles(_ files: [AudioKit.AKAudioFile]) throws
  @objc open func loadPath(_ filePath: Swift.String) throws
  @objc dynamic open var amplitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var volume: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pan: Swift.Double {
    @objc get
    @objc set
  }
  @objc open func play(noteNumber: AudioKit.MIDINoteNumber = 60, velocity: AudioKit.MIDIVelocity = 127, channel: AudioKit.MIDIChannel = 0) throws
  @objc open func stop(noteNumber: AudioKit.MIDINoteNumber = 60, channel: AudioKit.MIDIChannel = 0) throws
  @objc public func loadSoundFont(_ file: Swift.String, preset: Swift.Int, bank: Swift.Int) throws
  @objc public func loadMelodicSoundFont(_ file: Swift.String, preset: Swift.Int) throws
  @objc public func loadPercussiveSoundFont(_ file: Swift.String, preset: Swift.Int = 0) throws
  public func setPitchbend(amount: AudioKit.MIDIWord, channel: AudioKit.MIDIChannel)
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
}
@objc @_inheritsConvenienceInitializers public class AKShakerAudioUnit : AudioKit.AKGeneratorAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension AKFMOscillator {
  public func presetStunRay()
  public func presetFogHorn()
  public func presetBuzzer()
  public func presetSpiral()
  public func presetWobble()
}
extension AKComputedParameter {
  public func clip(_ limit: AudioKit.AKParameter = 1.0) -> AudioKit.AKOperation
}
extension AKComputedParameter {
  public func dcBlock() -> AudioKit.AKOperation
}
public protocol Numeric : AudioKit.AKParameter {
  func value() -> Swift.Double
}
extension Int : AudioKit.Numeric {
  public func value() -> Swift.Double
}
extension Float : AudioKit.Numeric {
  public func value() -> Swift.Double
}
extension Double : AudioKit.Numeric {
  public func value() -> Swift.Double
}
public func + (lhs: AudioKit.Numeric, rhs: AudioKit.Numeric) -> Swift.Double
public func - (lhs: AudioKit.Numeric, rhs: AudioKit.Numeric) -> Swift.Double
public func / (lhs: AudioKit.Numeric, rhs: AudioKit.Numeric) -> Swift.Double
public func * (lhs: AudioKit.Numeric, rhs: AudioKit.Numeric) -> Swift.Double
@objc open class AKDryWetMixer : AudioKit.AKNode, AudioKit.AKInput {
  @objc dynamic open var balance: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool
  @objc override dynamic public init()
  @objc convenience public init(_ input1: AudioKit.AKNode, _ input2: AudioKit.AKNode, balance: Swift.Double = 0.5)
  @objc convenience public init(dry: AudioKit.AKNode, wet: AudioKit.AKNode, balance: Swift.Double = 0.5)
  public var inputNode: AVFoundation.AVAudioNode {
    get
  }
  override open func detach()
  open var dryInput: AVFoundation.AVAudioConnectionPoint {
    get
  }
  open var wetInput: AVFoundation.AVAudioConnectionPoint {
    get
  }
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
}
extension AKOperation {
  public static func vocalTract(frequency: AudioKit.AKParameter = 160.0, tonguePosition: AudioKit.AKParameter = 0.5, tongueDiameter: AudioKit.AKParameter = 1.0, tenseness: AudioKit.AKParameter = 0.6, nasality: AudioKit.AKParameter = 0.0) -> AudioKit.AKOperation
}
@objc @_inheritsConvenienceInitializers public class AKDynamicPlayer : AudioKit.AKPlayer {
  public var timePitchNode: AudioKit.AKTimePitch? {
    get
  }
  public var rate: Swift.Double {
    get
    set
  }
  public var pitch: Swift.Double {
    get
    set
  }
  override open func initialize(restartIfPlaying: Swift.Bool = true)
  public func createTimePitch()
  public func removeTimePitch()
  override public func play(from startingTime: Swift.Double, to endingTime: Swift.Double, at audioTime: AVFoundation.AVAudioTime?, hostTime: Swift.UInt64?)
  @objc override public func stop()
  @objc override public func detach()
  @objc deinit
  @objc override dynamic public init()
}
extension AKComputedParameter {
  public func reverberateWithCombFilter(reverbDuration: AudioKit.AKParameter = 1.0, loopDuration: AudioKit.AKParameter = 0.1) -> AudioKit.AKOperation
}
@objc @_inheritsConvenienceInitializers public class AKAutoWahAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKOperationGenerator : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKOperationGeneratorAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc dynamic open var sporth: Swift.String {
    @objc get
    @objc set
  }
  @objc dynamic open var parameters: [Swift.Double] {
    @objc get
    @objc set
  }
  convenience public init(operation: ([AudioKit.AKOperation]) -> AudioKit.AKComputedParameter)
  convenience public init(channelCount: Swift.Int, operations: ([AudioKit.AKOperation]) -> [AudioKit.AKOperation])
  @objc override dynamic public init()
  @objc public init(sporth: Swift.String, customUgens: [AudioKit.AKCustomUgen] = [])
  open func trigger(_ triggerNumber: Swift.Int = 0)
  @objc open func start()
  @objc open func stop()
  open func restart()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  @objc deinit
  public typealias _Self = AudioKit.AKOperationGenerator
}
@objc open class AKStereoFieldLimiter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKStereoFieldLimiterAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var amount: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, amount: Swift.Double = 1)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKStereoFieldLimiter
}
@objc @_inheritsConvenienceInitializers public class AKStringResonatorAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
infix operator ~== : ComparisonPrecedence
public func ~== (left: Swift.Double, right: Swift.Double) -> Swift.Bool
infix operator ~!= : ComparisonPrecedence
public func ~!= (left: Swift.Double, right: Swift.Double) -> Swift.Bool
infix operator ~<= : ComparisonPrecedence
public func ~<= (left: Swift.Double, right: Swift.Double) -> Swift.Bool
infix operator ~>= : ComparisonPrecedence
public func ~>= (left: Swift.Double, right: Swift.Double) -> Swift.Bool
infix operator ~< : ComparisonPrecedence
public func ~< (left: Swift.Double, right: Swift.Double) -> Swift.Bool
infix operator ~> : ComparisonPrecedence
public func ~> (left: Swift.Double, right: Swift.Double) -> Swift.Bool
@objc open class AKKorgLowPassFilter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKKorgLowPassFilterAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let cutoffFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let resonanceRange: Swift.ClosedRange<Swift.Double>
  public static let saturationRange: Swift.ClosedRange<Swift.Double>
  public static let defaultCutoffFrequency: Swift.Double
  public static let defaultResonance: Swift.Double
  public static let defaultSaturation: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var cutoffFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var resonance: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var saturation: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, cutoffFrequency: Swift.Double = defaultCutoffFrequency, resonance: Swift.Double = defaultResonance, saturation: Swift.Double = defaultSaturation)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKKorgLowPassFilter
}
@objc @_inheritsConvenienceInitializers public class AKChowningReverbAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AKPitchShifterAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension AKOperation {
  public func increment(on trigger: AudioKit.AKParameter, by step: AudioKit.AKParameter = 1.0, minimum: AudioKit.AKParameter = 0.0, maximum: AudioKit.AKParameter = 1_000_000) -> AudioKit.AKOperation
}
extension AKComputedParameter {
  public func reverberateWithFlatFrequencyResponse(reverbDuration: AudioKit.AKParameter = 0.5, loopDuration: Swift.Double = 0.1) -> AudioKit.AKOperation
}
@objc open class AKTubularBells : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent {
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public typealias AKAudioUnitType = AudioKit.AKTubularBellsAudioUnit
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var frequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var amplitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(frequency: Swift.Double = 440, amplitude: Swift.Double = 0.5)
  open func trigger(frequency: Swift.Double, amplitude: Swift.Double = 1)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKTubularBells
}
@objc open class AKLowPassFilter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKInput {
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var cutoffFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var resonance: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var dryWetMix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool
  @objc public init(_ input: AudioKit.AKNode? = nil, cutoffFrequency: Swift.Double = 6_900, resonance: Swift.Double = 0)
  public var inputNode: AVFoundation.AVAudioNode {
    get
  }
  @objc open func start()
  @objc open func stop()
  override open func detach()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKLowPassFilter
}
@objc open class AKPeakLimiter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKInput {
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var attackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var decayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var preGain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var dryWetMix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool
  @objc public init(_ input: AudioKit.AKNode? = nil, attackDuration: Swift.Double = 0.012, decayDuration: Swift.Double = 0.024, preGain: Swift.Double = 0)
  public var inputNode: AVFoundation.AVAudioNode {
    get
  }
  @objc open func start()
  @objc open func stop()
  override open func detach()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKPeakLimiter
}
@objc open class AKStereoInput : AudioKit.AKNode, AudioKit.AKToggleable {
  @objc dynamic open var volume: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
  @objc open func start()
  @objc open func stop()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
}
public typealias MIDIByte = Swift.UInt8
public typealias MIDIWord = Swift.UInt16
public typealias MIDINoteNumber = Swift.UInt8
public typealias MIDIVelocity = Swift.UInt8
public typealias MIDIChannel = Swift.UInt8
public typealias Sample = Swift.UInt32
public typealias AKCCallback = @convention(block) () -> Swift.Void
public typealias AKCMIDICallback = @convention(block) (Swift.UInt8, Swift.UInt8, Swift.UInt8) -> Swift.Void
extension AudioUnitParameterOptions {
  public static let `default`: AudioToolbox.AudioUnitParameterOptions
}
extension CGRect {
  public init(size: CoreGraphics.CGSize)
  public init(width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat)
  public init(width: Swift.Int, height: Swift.Int)
}
public func fourCC(_ string: Swift.String) -> Swift.UInt32
@available(*, deprecated, renamed: "random(in:)")
public func random(_ minimum: Swift.Double, _ maximum: Swift.Double) -> Swift.Double
public func random(in range: Swift.ClosedRange<Swift.Double>) -> Swift.Double
extension Double {
  public func normalized(from range: Swift.ClosedRange<Swift.Double>, taper: Swift.Double = 1) -> Swift.Double
  @available(*, deprecated, renamed: "normalized(from:taper:)")
  public func normalized(minimum: Swift.Double, maximum: Swift.Double, taper: Swift.Double = 1) -> Swift.Double
  @available(*, deprecated, renamed: "normalize(from:taper:)")
  public mutating func normalize(minimum: Swift.Double, maximum: Swift.Double, taper: Swift.Double = 1)
  public func denormalized(to range: Swift.ClosedRange<Swift.Double>, taper: Swift.Double = 1) -> Swift.Double
  @available(*, deprecated, renamed: "denormalized(to:taper:)")
  public func denormalized(minimum: Swift.Double, maximum: Swift.Double, taper: Swift.Double = 1) -> Swift.Double
  @available(*, deprecated, renamed: "denormalize(to:taper:)")
  public mutating func denormalize(minimum: Swift.Double, maximum: Swift.Double, taper: Swift.Double = 1)
}
extension Int {
  public func midiNoteToFrequency(_ aRef: Swift.Double = 440.0) -> Swift.Double
}
extension UInt8 {
  public func midiNoteToFrequency(_ aRef: Swift.Double = 440.0) -> Swift.Double
}
extension Double {
  public func midiNoteToFrequency(_ aRef: Swift.Double = 440.0) -> Swift.Double
}
extension Int {
  public func frequencyToMIDINote(_ aRef: Swift.Double = 440.0) -> Swift.Double
}
extension Double {
  public func frequencyToMIDINote(_ aRef: Swift.Double = 440.0) -> Swift.Double
}
extension RangeReplaceableCollection where Self.Element : Swift.ExpressibleByIntegerLiteral {
  public init(zeros count: Swift.Int)
}
extension ClosedRange {
  public func clamp(_ value: Bound) -> Bound
}
extension AVAudioUnit {
  public class func _instantiate(with component: AudioToolbox.AudioComponentDescription, callback: @escaping (AVFoundation.AVAudioUnit) -> Swift.Void)
}
extension AUParameter {
  @nonobjc convenience public init(identifier: Swift.String, name: Swift.String, address: AudioToolbox.AUParameterAddress, range: Swift.ClosedRange<Swift.Double>, unit: AudioToolbox.AudioUnitParameterUnit, flags: AudioToolbox.AudioUnitParameterOptions)
}
public protocol Occupiable {
  var isEmpty: Swift.Bool { get }
  var isNotEmpty: Swift.Bool { get }
}
extension Occupiable {
  public var isNotEmpty: Swift.Bool {
    get
  }
}
extension String : AudioKit.Occupiable {
}
extension Array : AudioKit.Occupiable {
}
extension Dictionary : AudioKit.Occupiable {
}
extension Set : AudioKit.Occupiable {
}
extension AVAudioSession.CategoryOptions : AudioKit.Occupiable {
}
prefix operator ❗️
prefix public func ❗️ (a: Swift.Bool) -> Swift.Bool
extension AVAudioPCMBuffer {
  public struct Peak {
    public init()
    public static var min: Swift.Float
    public var time: Swift.Double
    public var framePosition: Swift.Int
    public var amplitude: Swift.Float
  }
  @discardableResult
  open func copy(from buffer: AVFoundation.AVAudioPCMBuffer, readOffset: AVFoundation.AVAudioFrameCount = 0, frames: AVFoundation.AVAudioFrameCount = 0) -> AVFoundation.AVAudioFrameCount
  open func copyFrom(startSample: AVFoundation.AVAudioFrameCount) -> AVFoundation.AVAudioPCMBuffer?
  open func copyTo(count: AVFoundation.AVAudioFrameCount) -> AVFoundation.AVAudioPCMBuffer?
  open func peakTime() -> Swift.Double
  open func peak() -> AVFoundation.AVAudioPCMBuffer.Peak?
  open func normalize() -> AVFoundation.AVAudioPCMBuffer?
  open func reverse() -> AVFoundation.AVAudioPCMBuffer?
  open func fade(inTime: Swift.Double, outTime: Swift.Double, inRampType: AudioKit.AKSettings.RampType = .exponential, outRampType: AudioKit.AKSettings.RampType = .exponential) -> AVFoundation.AVAudioPCMBuffer?
}
@objc open class AKPhaseDistortionOscillatorFilterSynth : AudioKit.AKPolyphonicNode, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKPhaseDistortionOscillatorFilterSynthAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var phaseDistortion: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var attackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var decayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var sustainLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var releaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pitchBend: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoDepth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoRate: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterCutoffFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterResonance: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterAttackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterDecayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterSustainLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterReleaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterEnvelopeStrength: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterLFODepth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterLFORate: Swift.Double {
    @objc get
    @objc set
  }
  @objc convenience override dynamic public init()
  @objc public init(waveform: AudioKit.AKTable, phaseDistortion: Swift.Double = 0.0, attackDuration: Swift.Double = 0.1, decayDuration: Swift.Double = 0.1, sustainLevel: Swift.Double = 1.0, releaseDuration: Swift.Double = 0.1, pitchBend: Swift.Double = 0, vibratoDepth: Swift.Double = 0, vibratoRate: Swift.Double = 0, filterCutoffFrequency: Swift.Double = 22_050.0, filterResonance: Swift.Double = 0.0, filterAttackDuration: Swift.Double = 0.1, filterDecayDuration: Swift.Double = 0.1, filterSustainLevel: Swift.Double = 1.0, filterReleaseDuration: Swift.Double = 1.0, filterEnvelopeStrength: Swift.Double = 0.0, filterLFODepth: Swift.Double = 0.0, filterLFORate: Swift.Double = 0.0)
  @objc override open func play(noteNumber: AudioKit.MIDINoteNumber, velocity: AudioKit.MIDIVelocity, frequency: Swift.Double, channel: AudioKit.MIDIChannel = 0)
  @objc override open func stop(noteNumber: AudioKit.MIDINoteNumber)
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKPhaseDistortionOscillatorFilterSynth
}
@objc open class AKCombFilterReverb : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKCombFilterReverbAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let reverbDurationRange: Swift.ClosedRange<Swift.Double>
  public static let defaultReverbDuration: Swift.Double
  public static let defaultLoopDuration: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var reverbDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, reverbDuration: Swift.Double = defaultReverbDuration, loopDuration: Swift.Double = defaultLoopDuration)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKCombFilterReverb
}
@objc @_inheritsConvenienceInitializers public class AKMetalBarAudioUnit : AudioKit.AKGeneratorAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKOscillator : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKOscillatorAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let frequencyRange: Swift.ClosedRange<Swift.Double>
  public static let amplitudeRange: Swift.ClosedRange<Swift.Double>
  public static let detuningOffsetRange: Swift.ClosedRange<Swift.Double>
  public static let detuningMultiplierRange: Swift.ClosedRange<Swift.Double>
  public static let defaultFrequency: Swift.Double
  public static let defaultAmplitude: Swift.Double
  public static let defaultDetuningOffset: Swift.Double
  public static let defaultDetuningMultiplier: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var frequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var amplitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var detuningOffset: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var detuningMultiplier: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc convenience override dynamic public init()
  @objc public init(waveform: AudioKit.AKTable, frequency: Swift.Double = defaultFrequency, amplitude: Swift.Double = defaultAmplitude, detuningOffset: Swift.Double = defaultDetuningOffset, detuningMultiplier: Swift.Double = defaultDetuningMultiplier)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKOscillator
}
@objc open class AKFlanger : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKFlangerAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let frequencyRange: Swift.ClosedRange<Swift.Double>
  public static let depthRange: Swift.ClosedRange<Swift.Double>
  public static let feedbackRange: Swift.ClosedRange<Swift.Double>
  public static let dryWetMixRange: Swift.ClosedRange<Swift.Double>
  public static let defaultFrequency: Swift.Double
  public static let defaultDepth: Swift.Double
  public static let defaultFeedback: Swift.Double
  public static let defaultDryWetMix: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var frequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var depth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var feedback: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var dryWetMix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, frequency: Swift.Double = defaultFrequency, depth: Swift.Double = defaultDepth, feedback: Swift.Double = defaultFeedback, dryWetMix: Swift.Double = defaultDryWetMix)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKFlanger
}
extension AKOperation {
  public static func whiteNoise(amplitude: AudioKit.AKParameter = 1.0) -> AudioKit.AKOperation
}
@_hasMissingDesignatedInitializers open class AKAUPresetBuilder {
  public static func createAUPreset(dict: [Foundation.NSMutableDictionary], path: Swift.String, instrumentName: Swift.String, attack: Swift.Double? = 0, release: Swift.Double? = 0)
  public static func generateDictionary(rootNote: Swift.Int, filename: Swift.String, startNote: Swift.Int, endNote: Swift.Int) -> Foundation.NSMutableDictionary
  public static func buildInstrument(name: Swift.String = "Coded Instrument Name", connections: Swift.String = "", envelopes: Swift.String = "", filter: Swift.String = "", lfos: Swift.String = "", zones: Swift.String = "***ZONES***\n", filerefs: Swift.String = "***FILEREFS***\n", layers: Swift.String = "") -> Swift.String
  @objc deinit
}
public enum SampleTriggerMode : Swift.String {
  case Hold
  case Trigger
  case Loop
  case Repeat
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class AKPeakingParametricEqualizerFilterAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension AKOperation {
  public static func triangle(frequency: AudioKit.AKParameter = 440, amplitude: AudioKit.AKParameter = 0.5, phase: AudioKit.AKParameter = 0) -> AudioKit.AKOperation
}
@objc open class AK3DPanner : AudioKit.AKNode, AudioKit.AKInput {
  @objc dynamic open var x: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var y: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var z: Swift.Double {
    @objc get
    @objc set
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, x: Swift.Double = 0, y: Swift.Double = 0, z: Swift.Double = 0)
  public var inputNode: AVFoundation.AVAudioNode {
    get
  }
  override open func detach()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
}
@objc open class AKExpander : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKInput {
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var expansionRatio: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var expansionThreshold: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var attackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var releaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var masterGain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var compressionAmount: Swift.Double {
    @objc get
  }
  @objc dynamic open var inputAmplitude: Swift.Double {
    @objc get
  }
  @objc dynamic open var outputAmplitude: Swift.Double {
    @objc get
  }
  @objc dynamic open var dryWetMix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool
  @objc public init(_ input: AudioKit.AKNode? = nil, threshold: Swift.Double = -20, headRoom: Swift.Double = 5, expansionRatio: Swift.Double = 2, expansionThreshold: Swift.Double = 2, attackDuration: Swift.Double = 0.001, releaseDuration: Swift.Double = 0.05, masterGain: Swift.Double = 0, compressionAmount: Swift.Double = 0, inputAmplitude: Swift.Double = 0, outputAmplitude: Swift.Double = 0)
  public var inputNode: AVFoundation.AVAudioNode {
    get
  }
  @objc open func start()
  @objc open func stop()
  override open func detach()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKExpander
}
@objc open class AKMorphingOscillatorBank : AudioKit.AKPolyphonicNode, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKMorphingOscillatorBankAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  open var waveformArray: [AudioKit.AKTable] {
    get
    set
  }
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var index: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var attackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var decayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var sustainLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var releaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pitchBend: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoDepth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoRate: Swift.Double {
    @objc get
    @objc set
  }
  @objc convenience override dynamic public init()
  @objc public init(waveformArray: [AudioKit.AKTable], index: Swift.Double = 0, attackDuration: Swift.Double = 0.1, decayDuration: Swift.Double = 0.1, sustainLevel: Swift.Double = 1.0, releaseDuration: Swift.Double = 0.1, pitchBend: Swift.Double = 0, vibratoDepth: Swift.Double = 0, vibratoRate: Swift.Double = 0)
  open func reset()
  @objc override open func play(noteNumber: AudioKit.MIDINoteNumber, velocity: AudioKit.MIDIVelocity, frequency: Swift.Double, channel: AudioKit.MIDIChannel = 0)
  @objc override open func stop(noteNumber: AudioKit.MIDINoteNumber)
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKMorphingOscillatorBank
}
@objc open class AKStereoDelay : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKStereoDelayAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let timeRange: Swift.ClosedRange<Swift.Double>
  public static let feedbackRange: Swift.ClosedRange<Swift.Double>
  public static let dryWetMixRange: Swift.ClosedRange<Swift.Double>
  public static let defaultTime: Swift.Double
  public static let defaultFeedback: Swift.Double
  public static let defaultDryWetMix: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var time: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var feedback: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var dryWetMix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pingPong: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, maximumDelayTime: Swift.Double = AKStereoDelay.timeRange.upperBound, time: Swift.Double = defaultTime, feedback: Swift.Double = defaultFeedback, dryWetMix: Swift.Double = defaultDryWetMix, pingPong: Swift.Bool = false)
  @objc open func start()
  @objc open func stop()
  @objc open func clear()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKStereoDelay
}
@objc @_inheritsConvenienceInitializers public class AKChorusAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AKToneFilterAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKFader : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput, AudioKit.AKAutomatable {
  public typealias AKAudioUnitType = AudioKit.AKFaderAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static var gainRange: (Swift.ClosedRange<Swift.Double>)
  @objc public var parameterAutomation: AudioKit.AKParameterAutomation? {
    @objc get
  }
  @objc dynamic open var gain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var leftGain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var rightGain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var dB: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var taper: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var skew: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var offset: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var flipStereo: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic open var mixToMono: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, gain: Swift.Double = 1, taper: Swift.Double = 1, skew: Swift.Double = 0, offset: Swift.Double = 0)
  override open func detach()
  @objc deinit
  @objc open func start()
  @objc open func stop()
  @objc public func startAutomation(at audioTime: AVFoundation.AVAudioTime?, duration: AVFoundation.AVAudioTime?)
  @objc public func stopAutomation()
  public func addAutomationPoint(value: Swift.Double, at sampleTime: AudioToolbox.AUEventSampleTime, anchorTime: AudioToolbox.AUEventSampleTime, rampDuration: AudioToolbox.AUAudioFrameCount = 0, taper taperValue: Swift.Double? = nil, skew skewValue: Swift.Double? = nil, offset offsetValue: AudioToolbox.AUAudioFrameCount? = nil)
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKFader
}
@objc @_inheritsConvenienceInitializers open class AKSettings : ObjectiveC.NSObject {
  @objc public enum BufferLength : Swift.Int {
    case shortest = 5
    case veryShort = 6
    case short = 7
    case medium = 8
    case long = 9
    case veryLong = 10
    case huge = 11
    case longest = 12
    public var samplesCount: AVFoundation.AVAudioFrameCount {
      get
    }
    public var duration: Swift.Double {
      get
    }
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum RampType : Swift.Int {
    case linear = 0
    case exponential = 1
    case logarithmic = 2
    case sCurve = 3
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
    public init?(rawValue: Swift.Int)
  }
  @objc public static let defaultAudioFormat: AVFoundation.AVAudioFormat
  @objc public static var sampleRate: Swift.Double {
    @objc get
    @objc set
  }
  @objc public static var channelCount: Swift.UInt32 {
    @objc get
    @objc set
  }
  @objc public static var audioInputEnabled: Swift.Bool
  @objc public static var rampDuration: Swift.Double
  @objc public static var notificationsEnabled: Swift.Bool
  @objc public static var bufferLength: AudioKit.AKSettings.BufferLength
  @objc public static var recordingBufferLength: AudioKit.AKSettings.BufferLength
  @objc public static var fixTruncatedRecordings: Swift.Bool
  @objc public static var enableLogging: Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
extension AKSettings {
  @objc public static var audioFormat: AVFoundation.AVAudioFormat {
    @objc get
  }
  @objc public static var allowHapticsAndSystemSoundsDuringRecording: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public static var disableAVAudioSessionCategoryManagement: Swift.Bool
  @objc public static var disableAudioSessionDeactivationOnStop: Swift.Bool
  @objc public static var enableRouteChangeHandling: Swift.Bool
  @objc public static var enableCategoryChangeHandling: Swift.Bool
  @objc public static var playbackWhileMuted: Swift.Bool
  @objc public static var mixWithOthers: Swift.Bool
  @objc public static var defaultToSpeaker: Swift.Bool
  @objc public static var useBluetooth: Swift.Bool
  @objc public static var allowAirPlay: Swift.Bool
  @objc public static var bluetoothOptions: AVFoundation.AVAudioSession.CategoryOptions
  @objc public static var enableEchoCancellation: Swift.Bool
  @objc public static var ioBufferDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc public static let appSupportsBackgroundAudio: Swift.Bool
  @objc public static let session: AVFoundation.AVAudioSession
  @objc public static func setSession(category: AudioKit.AKSettings.SessionCategory, options: Swift.UInt) throws
  @objc public static func setSession(category: AudioKit.AKSettings.SessionCategory, with options: AVFoundation.AVAudioSession.CategoryOptions = []) throws
  @objc public static func computedSessionCategory() -> AudioKit.AKSettings.SessionCategory
  @objc public static func computedSessionOptions() -> AVFoundation.AVAudioSession.CategoryOptions
  @objc public static var headPhonesPlugged: Swift.Bool {
    @objc get
  }
  @objc public enum SessionCategory : Swift.Int, Swift.CustomStringConvertible {
    case ambient
    case soloAmbient
    case playback
    case record
    case playAndRecord
    case multiRoute
    public var description: Swift.String {
      get
    }
    public var avCategory: AVFoundation.AVAudioSession.Category {
      get
    }
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension AKComputedParameter {
  public func bitCrush(bitDepth: AudioKit.AKParameter = 8, sampleRate: AudioKit.AKParameter = 10_000) -> AudioKit.AKOperation
}
extension AKOperation {
  public func save(parameterIndex: Swift.Int) -> AudioKit.AKOperation
}
@objc open class AKClipper : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKClipperAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let limitRange: Swift.ClosedRange<Swift.Double>
  public static let defaultLimit: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var limit: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, limit: Swift.Double = defaultLimit)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKClipper
}
@objc open class AKPhaseLockedVocoder : AudioKit.AKNode, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKPhaseLockedVocoderAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let positionRange: Swift.ClosedRange<Swift.Double>
  public static let defaultPosition: Swift.Double
  public static let amplitudeRange: Swift.ClosedRange<Swift.Double>
  public static let defaultAmplitude: Swift.Double
  public static let pitchRatioRange: Swift.ClosedRange<Swift.Double>
  public static let defaultPitchRatio: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var position: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var amplitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pitchRatio: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(file: AVFoundation.AVAudioFile, position: Swift.Double = 0, amplitude: Swift.Double = 1, pitchRatio: Swift.Double = 1)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKPhaseLockedVocoder
}
@objc open class AKPWMOscillatorBank : AudioKit.AKPolyphonicNode, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKPWMOscillatorBankAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pulseWidth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var attackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var decayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var sustainLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var releaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pitchBend: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoDepth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoRate: Swift.Double {
    @objc get
    @objc set
  }
  @objc convenience override dynamic public init()
  @objc public init(pulseWidth: Swift.Double = 0.5, attackDuration: Swift.Double = 0.1, decayDuration: Swift.Double = 0.1, sustainLevel: Swift.Double = 1.0, releaseDuration: Swift.Double = 0.1, pitchBend: Swift.Double = 0, vibratoDepth: Swift.Double = 0, vibratoRate: Swift.Double = 0)
  @objc override open func play(noteNumber: AudioKit.MIDINoteNumber, velocity: AudioKit.MIDIVelocity, frequency: Swift.Double, channel: AudioKit.MIDIChannel = 0)
  @objc override open func stop(noteNumber: AudioKit.MIDINoteNumber)
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKPWMOscillatorBank
}
@objc public enum AKTableType : Swift.Int, Swift.Codable, Swift.CaseIterable {
  case sine
  case triangle
  case square
  case sawtooth
  case reverseSawtooth
  case positiveSine
  case positiveTriangle
  case positiveSquare
  case positiveSawtooth
  case positiveReverseSawtooth
  case zero
  case custom
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [AudioKit.AKTableType]
  public static var allCases: [AudioKit.AKTableType] {
    get
  }
}
@objc public class AKTable : ObjectiveC.NSObject, Swift.MutableCollection, Swift.Codable {
  public typealias Index = Swift.Int
  public typealias IndexDistance = Swift.Int
  public typealias Element = Swift.Float
  public typealias SubSequence = Swift.ArraySlice<AudioKit.AKTable.Element>
  public var content: [AudioKit.AKTable.Element] {
    get
  }
  public var phase: Swift.Float {
    get
    set
  }
  public var startIndex: AudioKit.AKTable.Index {
    get
  }
  public var endIndex: AudioKit.AKTable.Index {
    get
  }
  public var count: AudioKit.AKTable.IndexDistance {
    get
  }
  public subscript(index: AudioKit.AKTable.Index) -> AudioKit.AKTable.Element {
    get
    set
  }
  public subscript(bounds: Swift.Range<AudioKit.AKTable.Index>) -> AudioKit.AKTable.SubSequence {
    get
    set
  }
  @objc public init(_ type: AudioKit.AKTableType = .sine, phase: Swift.Float = 0, count: AudioKit.AKTable.IndexDistance = 4_096)
  @objc public init(_ content: [AudioKit.AKTable.Element], phase: Swift.Float = 0)
  @objc convenience public init(file: AudioKit.AKAudioFile)
  public var phaseOffset: Swift.Int {
    @inline(__always) get
  }
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public typealias Iterator = Swift.IndexingIterator<AudioKit.AKTable>
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
extension AKTable : Swift.RandomAccessCollection {
  public typealias Indices = Swift.Array<AudioKit.AKTable.Element>.Indices
  @inline(__always) public func index(before i: AudioKit.AKTable.Index) -> AudioKit.AKTable.Index
  @inline(__always) public func index(after i: AudioKit.AKTable.Index) -> AudioKit.AKTable.Index
  @inline(__always) public func index(_ i: AudioKit.AKTable.Index, offsetBy n: AudioKit.AKTable.IndexDistance) -> AudioKit.AKTable.Index
  @inline(__always) public func formIndex(after i: inout AudioKit.AKTable.Index)
  @inline(__always) public func distance(from start: AudioKit.AKTable.Index, to end: AudioKit.AKTable.Index) -> AudioKit.AKTable.IndexDistance
}
@objc open class AKOscillatorBank : AudioKit.AKPolyphonicNode, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKOscillatorBankAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  open var waveform: AudioKit.AKTable? {
    get
    set
  }
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var attackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var decayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var sustainLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var releaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pitchBend: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoDepth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoRate: Swift.Double {
    @objc get
    @objc set
  }
  @objc convenience override dynamic public init()
  @objc public init(waveform: AudioKit.AKTable, attackDuration: Swift.Double = 0.1, decayDuration: Swift.Double = 0.1, sustainLevel: Swift.Double = 1.0, releaseDuration: Swift.Double = 0.1, pitchBend: Swift.Double = 0, vibratoDepth: Swift.Double = 0, vibratoRate: Swift.Double = 0)
  open func reset()
  @objc override open func play(noteNumber: AudioKit.MIDINoteNumber, velocity: AudioKit.MIDIVelocity, frequency: Swift.Double, channel: AudioKit.MIDIChannel = 0)
  @objc override open func stop(noteNumber: AudioKit.MIDINoteNumber)
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKOscillatorBank
}
@objc open class AKWaveTable : AudioKit.AKNode, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKWaveTableAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var startPoint: AudioKit.Sample {
    @objc get
    @objc set
  }
  @objc dynamic open var endPoint: AudioKit.Sample {
    @objc get
    @objc set
  }
  @objc dynamic open var loopStartPoint: AudioKit.Sample {
    @objc get
    @objc set
  }
  @objc dynamic open var loopEndPoint: AudioKit.Sample {
    @objc get
    @objc set
  }
  @objc dynamic open var rate: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var volume: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var loopEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  open var size: AudioKit.Sample {
    get
  }
  open var originalSampleRate: Swift.Double? {
    get
  }
  open var normalizedPosition: Swift.Double {
    get
  }
  open var position: Swift.Double {
    get
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  open var loadCompletionHandler: () -> Swift.Void {
    get
    set
  }
  open var completionHandler: () -> Swift.Void {
    get
    set
  }
  open var loopCallback: () -> Swift.Void {
    get
    set
  }
  @objc public init(file: AudioKit.AKAudioFile? = nil, startPoint: AudioKit.Sample = 0, endPoint: AudioKit.Sample = 0, rate: Swift.Double = 1, volume: Swift.Double = 1, maximumSamples: AudioKit.Sample, completionHandler: @escaping AudioKit.AKCCallback = {}, loadCompletionHandler: @escaping AudioKit.AKCCallback = {})
  @objc open func start()
  @objc open func stop()
  open func play()
  open func play(from: AudioKit.Sample)
  open func play(from: AudioKit.Sample, length: AudioKit.Sample)
  open func play(from: AudioKit.Sample, to: AudioKit.Sample)
  open func load(file: AudioKit.AKAudioFile)
  @objc deinit
  open func play(noteNumber: AudioKit.MIDINoteNumber, velocity: AudioKit.MIDIVelocity, frequency: Swift.Double, channel: AudioKit.MIDIChannel = 0)
  open func stop(noteNumber: AudioKit.MIDINoteNumber)
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKWaveTable
}
@objc open class AKHighShelfFilter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKInput {
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var cutoffFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var gain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var dryWetMix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool
  @objc public init(_ input: AudioKit.AKNode? = nil, cutOffFrequency: Swift.Double = 10_000, gain: Swift.Double = 0)
  public var inputNode: AVFoundation.AVAudioNode {
    get
  }
  @objc open func start()
  @objc open func stop()
  override open func detach()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKHighShelfFilter
}
@objc open class AKRhinoGuitarProcessor : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKRhinoGuitarProcessorAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var preGain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var postGain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var lowGain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var midGain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var highGain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var distortion: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, preGain: Swift.Double = 5.0, postGain: Swift.Double = 0.7, lowGain: Swift.Double = 0.0, midGain: Swift.Double = 0.0, highGain: Swift.Double = 0.0, distortion: Swift.Double = 1.0)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKRhinoGuitarProcessor
}
@objc open class AKModalResonanceFilter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKModalResonanceFilterAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let frequencyRange: Swift.ClosedRange<Swift.Double>
  public static let qualityFactorRange: Swift.ClosedRange<Swift.Double>
  public static let defaultFrequency: Swift.Double
  public static let defaultQualityFactor: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var frequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var qualityFactor: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, frequency: Swift.Double = defaultFrequency, qualityFactor: Swift.Double = defaultQualityFactor)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKModalResonanceFilter
}
@objc @_inheritsConvenienceInitializers public class AKVocalTractAudioUnit : AudioKit.AKGeneratorAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension AKOperation {
  public func portamento(halfDuration: AudioKit.AKParameter = 0.02) -> AudioKit.AKOperation
}
@objc public protocol AKClip : AnyObject {
  @objc var time: Swift.Double { get }
  @objc var offset: Swift.Double { get }
  @objc var duration: Swift.Double { get }
}
extension AKClip {
  public func overlaps(_ otherClip: AudioKit.AKClip) -> Swift.Bool
  public var isValid: Swift.Bool {
    get
  }
  public var endTime: Swift.Double {
    get
  }
}
@objc public protocol FileClip : AudioKit.AKClip {
  @objc var audioFile: AudioKit.AKAudioFile { get }
}
@objc open class AKFileClip : ObjectiveC.NSObject, AudioKit.FileClip {
  @objc open var audioFile: AudioKit.AKAudioFile
  @objc open var time: Swift.Double
  @objc open var offset: Swift.Double
  @objc open var duration: Swift.Double
  @objc public init(audioFile: AudioKit.AKAudioFile, time: Swift.Double = 0, offset: Swift.Double = 0, duration: Swift.Double = 0)
  convenience public init?(url: Foundation.URL)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AKFaderAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AKLowPassButterworthFilterAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKDynamicsProcessor : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKInput {
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var threshold: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var headRoom: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var expansionRatio: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var expansionThreshold: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var attackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var releaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var masterGain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var compressionAmount: Swift.Double {
    @objc get
  }
  @objc dynamic open var inputAmplitude: Swift.Double {
    @objc get
  }
  @objc dynamic open var outputAmplitude: Swift.Double {
    @objc get
  }
  @objc dynamic open var dryWetMix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool
  @objc public init(_ input: AudioKit.AKNode? = nil, threshold: Swift.Double = -20, headRoom: Swift.Double = 5, expansionRatio: Swift.Double = 2, expansionThreshold: Swift.Double = 2, attackDuration: Swift.Double = 0.001, releaseDuration: Swift.Double = 0.05, masterGain: Swift.Double = 0, compressionAmount: Swift.Double = 0, inputAmplitude: Swift.Double = 0, outputAmplitude: Swift.Double = 0)
  public var inputNode: AVFoundation.AVAudioNode {
    get
  }
  @objc open func start()
  @objc open func stop()
  override open func detach()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKDynamicsProcessor
}
extension AKOperation {
  public static func jitter(amplitude: AudioKit.AKParameter = 0.5, minimumFrequency: AudioKit.AKParameter = 0.5, maximumFrequency: AudioKit.AKParameter = 4) -> AudioKit.AKOperation
}
@objc open class AKCustomUgen : ObjectiveC.NSObject {
  @objc final public let name: Swift.String
  @objc final public let argTypes: Swift.String
  @objc open var userData: Any?
  final public let computeFunction: (AudioKit.AKCustomUgen, AudioKit.AKSporthStack, inout Any?) -> Swift.Void
  @objc public var stack: AudioKit.AKSporthStack
  public init(name: Swift.String, argTypes: Swift.String, userData: Any? = nil, computeFunction: @escaping (AudioKit.AKCustomUgen, AudioKit.AKSporthStack, inout Any?) -> Swift.Void)
  @objc public func duplicate() -> AudioKit.AKCustomUgen
  @objc final public let callComputeFunction: @convention(c) (AudioKit.AKCustomUgen) -> Swift.Void
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AKTubularBellsAudioUnit : AudioKit.AKGeneratorAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc public class AKPlayer : AudioKit.AKAbstractPlayer {
  public enum BufferingType {
    case dynamic, always
    public static func == (a: AudioKit.AKPlayer.BufferingType, b: AudioKit.AKPlayer.BufferingType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  @objc public var playerNode: AVFoundation.AVAudioPlayerNode
  @objc public var mixerNode: AVFoundation.AVAudioMixerNode?
  @objc public var completionHandler: AudioKit.AKCallback? {
    @objc get
    @objc set
  }
  @objc public var loopCompletionHandler: AudioKit.AKCallback?
  @objc public var buffer: AVFoundation.AVAudioPCMBuffer?
  public var buffering: AudioKit.AKPlayer.BufferingType {
    get
    set
  }
  override public var renderingMode: AudioKit.AKAbstractPlayer.RenderingMode {
    get
  }
  @objc public var audioFile: AVFoundation.AVAudioFile? {
    get
  }
  @objc override public var duration: Swift.Double {
    @objc get
  }
  @objc override public var sampleRate: Swift.Double {
    @objc get
  }
  @objc public var volume: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var pan: Swift.Double {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "Removed in favor of Taper")
  @objc public var rampType: AudioKit.AKSettings.RampType
  @objc public var frameCount: AVFoundation.AVAudioFrameCount {
    get
  }
  @objc public var currentFrame: AVFoundation.AVAudioFramePosition {
    @objc get
  }
  @objc public var currentTime: Swift.Double {
    @objc get
  }
  public var pauseTime: Swift.Double? {
    get
    set
  }
  @objc public var processingFormat: AVFoundation.AVAudioFormat? {
    @objc get
  }
  @objc public var isBuffered: Swift.Bool {
    @objc get
  }
  @objc public var isNormalized: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var isPaused: Swift.Bool {
    get
  }
  @objc public var isReversed: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var isBufferFaded: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc convenience public init?(url: Foundation.URL)
  @objc convenience public init(audioFile: AVFoundation.AVAudioFile, reopenFile: Swift.Bool = true)
  override open func initialize(restartIfPlaying: Swift.Bool = true)
  @objc public func load(url: Foundation.URL) throws
  @objc public func load(audioFile: AVFoundation.AVAudioFile) throws
  @objc public func preroll(from startingTime: Swift.Double = 0, to endingTime: Swift.Double = 0)
  @objc override public func play()
  public func play(from startingTime: Swift.Double, to endingTime: Swift.Double, at audioTime: AVFoundation.AVAudioTime?, hostTime: Swift.UInt64?)
  @objc override public func stop()
  @objc override public func detach()
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
}
@objc extension AKPlayer : AudioKit.AKTiming {
  @objc dynamic public func start(at audioTime: AVFoundation.AVAudioTime?)
  @objc dynamic public var isStarted: Swift.Bool {
    @objc get
  }
  @objc dynamic public func setPosition(_ position: Swift.Double)
  @objc dynamic public func position(at audioTime: AVFoundation.AVAudioTime?) -> Swift.Double
  @objc dynamic public func audioTime(at position: Swift.Double) -> AVFoundation.AVAudioTime?
  @objc dynamic open func prepare()
}
@objc open class AKDelay : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKInput {
  @objc dynamic open var time: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var feedback: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var lowPassCutoff: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var dryWetMix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool
  @objc public init(_ input: AudioKit.AKNode? = nil, time: Swift.Double = 1, feedback: Swift.Double = 0.5, lowPassCutoff: Swift.Double = 15_000, dryWetMix: Swift.Double = 0.5)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
}
extension AKOperation {
  public static func periodicTrigger(period: AudioKit.AKParameter = 1.0) -> AudioKit.AKOperation
}
@objc @_inheritsConvenienceInitializers public class AKDCBlockAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
public typealias AKThresholdCallback = @convention(block) (Swift.Bool) -> Swift.Void
@objc open class AKAmplitudeTracker : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKAmplitudeTrackerAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc dynamic open var amplitude: Swift.Double {
    @objc get
  }
  @objc dynamic open var leftAmplitude: Swift.Double {
    @objc get
  }
  @objc dynamic open var rightAmplitude: Swift.Double {
    @objc get
  }
  @objc dynamic open var threshold: Swift.Double {
    @objc get
    @objc set
  }
  open var mode: AudioKit.AmplitudeTrackingMode {
    get
    set
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, halfPowerPoint: Swift.Double = 10, threshold: Swift.Double = 1, thresholdCallback: @escaping AudioKit.AKThresholdCallback = { _ in })
  @objc deinit
  @objc open func start()
  @objc open func stop()
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKAmplitudeTracker
}
public enum AmplitudeTrackingMode : Swift.Int32 {
  case rms
  case maxRMS
  case peak
  public typealias RawValue = Swift.Int32
  public init?(rawValue: Swift.Int32)
  public var rawValue: Swift.Int32 {
    get
  }
}
extension AKOperation {
  public static func sawtoothWave(frequency: AudioKit.AKParameter = 440, amplitude: AudioKit.AKParameter = 0.5) -> AudioKit.AKOperation
}
@objc open class AKVariableDelay : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKVariableDelayAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let timeRange: Swift.ClosedRange<Swift.Double>
  public static let feedbackRange: Swift.ClosedRange<Swift.Double>
  public static let defaultTime: Swift.Double
  public static let defaultFeedback: Swift.Double
  public static let defaultMaximumDelayTime: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var time: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var feedback: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, time: Swift.Double = defaultTime, feedback: Swift.Double = defaultFeedback, maximumDelayTime: Swift.Double = defaultMaximumDelayTime)
  @objc open func start()
  @objc open func stop()
  @objc open func clear()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKVariableDelay
}
@objc open class AKLowPassButterworthFilter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKLowPassButterworthFilterAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let cutoffFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let defaultCutoffFrequency: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var cutoffFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, cutoffFrequency: Swift.Double = defaultCutoffFrequency)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKLowPassButterworthFilter
}
@objc @_inheritsConvenienceInitializers public class AKLowShelfParametricEqualizerFilterAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension AKManager {
  public static func start(withPeriodicFunctions functions: AudioKit.AKPeriodicFunction...) throws
  @objc public static func start() throws
  @objc public static func stop() throws
  @objc public static func shutdown() throws
}
extension AKAudioFile {
  public static func silent(samples: Swift.Int64, baseDir: AudioKit.AKAudioFile.BaseDirectory = .temp, name: Swift.String = "") throws -> AudioKit.AKAudioFile
  public static func findPeak(pcmBuffer: AVFoundation.AVAudioPCMBuffer) -> Swift.Double
}
extension AKSampler {
  open func loadSFZ(path: Swift.String, fileName: Swift.String)
  open func loadSFZ(url: Foundation.URL)
}
@objc open class AKPhaser : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKPhaserAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let notchMinimumFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let notchMaximumFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let notchWidthRange: Swift.ClosedRange<Swift.Double>
  public static let notchFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let vibratoModeRange: Swift.ClosedRange<Swift.Double>
  public static let depthRange: Swift.ClosedRange<Swift.Double>
  public static let feedbackRange: Swift.ClosedRange<Swift.Double>
  public static let invertedRange: Swift.ClosedRange<Swift.Double>
  public static let lfoBPMRange: Swift.ClosedRange<Swift.Double>
  public static let defaultNotchMinimumFrequency: Swift.Double
  public static let defaultNotchMaximumFrequency: Swift.Double
  public static let defaultNotchWidth: Swift.Double
  public static let defaultNotchFrequency: Swift.Double
  public static let defaultVibratoMode: Swift.Double
  public static let defaultDepth: Swift.Double
  public static let defaultFeedback: Swift.Double
  public static let defaultInverted: Swift.Double
  public static let defaultLfoBPM: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var notchMinimumFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var notchMaximumFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var notchWidth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var notchFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoMode: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var depth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var feedback: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var inverted: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var lfoBPM: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, notchMinimumFrequency: Swift.Double = defaultNotchMinimumFrequency, notchMaximumFrequency: Swift.Double = defaultNotchMaximumFrequency, notchWidth: Swift.Double = defaultNotchWidth, notchFrequency: Swift.Double = defaultNotchFrequency, vibratoMode: Swift.Double = defaultVibratoMode, depth: Swift.Double = defaultDepth, feedback: Swift.Double = defaultFeedback, inverted: Swift.Double = defaultInverted, lfoBPM: Swift.Double = defaultLfoBPM)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKPhaser
}
extension AKTuningTable {
  @discardableResult
  @objc dynamic public func khiasmos22Indian() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian00_17() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian01Kalyan() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian02Bilawal() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian03Khamaj() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian04KafiOld() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian05Kafi() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian06Asawari() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian07Bhairavi() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian08Marwa() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian09Purvi() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian10Lalit2() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian11Todi() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian12Lalit() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian13NoName() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian14AnandBhairav() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian15Bhairav() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian16JogiyaTodi() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian17Madhubanti() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian18NatBhairav() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian19AhirBhairav() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian20ChandraKanada() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian21BasantMukhari() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian22Champakali() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian23Patdeep() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian24MohanKauns() -> Swift.Int
  @discardableResult
  @objc dynamic public func presetPersian17NorthIndian25Parameswari() -> Swift.Int
}
extension AKOperation {
  public func dividedBy(_ denominator: AudioKit.AKParameter) -> AudioKit.AKOperation
}
public func / (numerator: AudioKit.AKParameter, denominator: AudioKit.AKParameter) -> AudioKit.AKOperation
public func / (numerator: AudioKit.AKStereoOperation, denominator: AudioKit.AKParameter) -> AudioKit.AKStereoOperation
public class AKScheduledAction {
  @objc public init(interval: Foundation.TimeInterval, block: @escaping () -> Swift.Void)
  @objc deinit
}
public typealias ClipRecordingCompletion = (AudioKit.ClipRecordingResult) -> Swift.Void
public struct ClipRecording {
  public let url: Foundation.URL
  public let startTime: Swift.Double
  public let duration: Swift.Double
}
public enum ClipRecordingResult {
  case clip(AudioKit.ClipRecording)
  case error(Swift.Error)
}
open class AKClipRecorder {
  open var node: AudioKit.AKOutput
  @objc public init(node: AudioKit.AKOutput)
  @objc deinit
  open func start()
  @objc open func start(at audioTime: AVFoundation.AVAudioTime?)
  open var currentTime: Swift.Double {
    get
    set
  }
  open func stop(_ completion: (() -> Swift.Void)? = nil)
  open func stopRecording(endTime: Swift.Double? = nil, _ completion: (() -> Swift.Void)? = nil)
  open var isRecording: Swift.Bool {
    get
  }
  public func recordClip(time: Swift.Double = 0, duration: Swift.Double = Double.greatestFiniteMagnitude, tap: AVFoundation.AVAudioNodeTapBlock? = nil, completion: @escaping AudioKit.ClipRecordingCompletion) throws
}
extension AKClipRecorder : AudioKit.AKTiming {
  @objc dynamic public var isStarted: Swift.Bool {
    @objc get
  }
  @objc dynamic public func stop()
  @objc dynamic public func setPosition(_ position: Swift.Double)
  @objc dynamic public func position(at audioTime: AVFoundation.AVAudioTime?) -> Swift.Double
  @objc dynamic public func audioTime(at position: Swift.Double) -> AVFoundation.AVAudioTime?
}
public enum ClipRecordingError : Swift.Error, Foundation.LocalizedError {
  case timingError
  case invalidParameters
  case clipIsEmpty
  case formatError
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: AudioKit.ClipRecordingError, b: AudioKit.ClipRecordingError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc open class AKMoogLadder : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKMoogLadderAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let cutoffFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let resonanceRange: Swift.ClosedRange<Swift.Double>
  public static let defaultCutoffFrequency: Swift.Double
  public static let defaultResonance: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var cutoffFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var resonance: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, cutoffFrequency: Swift.Double = defaultCutoffFrequency, resonance: Swift.Double = defaultResonance)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKMoogLadder
}
public protocol AKParameter : Swift.CustomStringConvertible {
  func toMono() -> AudioKit.AKOperation
  func toStereo() -> AudioKit.AKStereoOperation
}
extension AKParameter {
  public func toMono() -> AudioKit.AKOperation
  public func toStereo() -> AudioKit.AKStereoOperation
}
@objc open class AKMorphingOscillator : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKMorphingOscillatorAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let frequencyRange: Swift.ClosedRange<Swift.Double>
  public static let amplitudeRange: Swift.ClosedRange<Swift.Double>
  public static let indexRange: Swift.ClosedRange<Swift.Double>
  public static let detuningOffsetRange: Swift.ClosedRange<Swift.Double>
  public static let detuningMultiplierRange: Swift.ClosedRange<Swift.Double>
  public static let defaultFrequency: Swift.Double
  public static let defaultAmplitude: Swift.Double
  public static let defaultIndex: Swift.Double
  public static let defaultDetuningOffset: Swift.Double
  public static let defaultDetuningMultiplier: Swift.Double
  public static let defaultPhase: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var frequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var amplitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var index: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var detuningOffset: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var detuningMultiplier: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc convenience override dynamic public init()
  @objc public init(waveformArray: [AudioKit.AKTable], frequency: Swift.Double = defaultFrequency, amplitude: Swift.Double = defaultAmplitude, index: Swift.Double = defaultIndex, detuningOffset: Swift.Double = defaultDetuningOffset, detuningMultiplier: Swift.Double = defaultDetuningMultiplier, phase: Swift.Double = defaultPhase)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKMorphingOscillator
}
extension AKOperation {
  public func count(maximum: AudioKit.AKParameter = 1_000_000, looping: Swift.Bool = true) -> AudioKit.AKOperation
}
@objc open class AKFMOscillatorFilterSynth : AudioKit.AKPolyphonicNode, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKFMOscillatorFilterSynthAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  open var waveform: AudioKit.AKTable? {
    get
    set
  }
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var carrierMultiplier: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var modulatingMultiplier: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var modulationIndex: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var attackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var decayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var sustainLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var releaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pitchBend: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoDepth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoRate: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterCutoffFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterResonance: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterAttackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterDecayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterSustainLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterReleaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterEnvelopeStrength: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterLFODepth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterLFORate: Swift.Double {
    @objc get
    @objc set
  }
  @objc convenience override dynamic public init()
  @objc public init(waveform: AudioKit.AKTable, carrierMultiplier: Swift.Double = 1, modulatingMultiplier: Swift.Double = 1, modulationIndex: Swift.Double = 1, attackDuration: Swift.Double = 0.1, decayDuration: Swift.Double = 0.1, sustainLevel: Swift.Double = 1, releaseDuration: Swift.Double = 0.1, pitchBend: Swift.Double = 0, vibratoDepth: Swift.Double = 0, vibratoRate: Swift.Double = 0, filterCutoffFrequency: Swift.Double = 22_050.0, filterResonance: Swift.Double = 0.0, filterAttackDuration: Swift.Double = 0.1, filterDecayDuration: Swift.Double = 0.1, filterSustainLevel: Swift.Double = 1.0, filterReleaseDuration: Swift.Double = 1.0, filterEnvelopeStrength: Swift.Double = 0.0, filterLFODepth: Swift.Double = 0.0, filterLFORate: Swift.Double = 0.0)
  @objc override open func play(noteNumber: AudioKit.MIDINoteNumber, velocity: AudioKit.MIDIVelocity, frequency: Swift.Double, channel: AudioKit.MIDIChannel = 0)
  @objc override open func stop(noteNumber: AudioKit.MIDINoteNumber)
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKFMOscillatorFilterSynth
}
@_inheritsConvenienceInitializers @objc open class AKNode : ObjectiveC.NSObject {
  @objc open var avAudioNode: AVFoundation.AVAudioNode
  @objc open var avAudioUnit: AVFoundation.AVAudioUnit?
  @objc open var avAudioUnitOrNode: AVFoundation.AVAudioNode {
    @objc get
  }
  @objc override dynamic public init()
  @objc public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = false)
  @objc public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = false)
  open func detach()
  @objc deinit
}
extension AKNode : AudioKit.AKOutput {
  @objc dynamic public var outputNode: AVFoundation.AVAudioNode {
    @objc get
  }
  @available(*, deprecated, renamed: "connect(to:bus:)")
  open func addConnectionPoint(_ node: AudioKit.AKNode, bus: Swift.Int = 0)
}
extension AKNode {
  @available(*, deprecated, renamed: "detach")
  @objc dynamic open func disconnect()
  @available(*, deprecated, message: "Use AudioKit.detach(nodes:) instead")
  open func disconnect(nodes: [AVFoundation.AVAudioNode])
}
public protocol AKPolyphonic {
  func play(noteNumber: AudioKit.MIDINoteNumber, velocity: AudioKit.MIDIVelocity, frequency: Swift.Double, channel: AudioKit.MIDIChannel)
  func play(noteNumber: AudioKit.MIDINoteNumber, velocity: AudioKit.MIDIVelocity, channel: AudioKit.MIDIChannel)
  func stop(noteNumber: AudioKit.MIDINoteNumber)
}
@_inheritsConvenienceInitializers @objc open class AKPolyphonicNode : AudioKit.AKNode, AudioKit.AKPolyphonic {
  @objc public static var tuningTable: AudioKit.AKTuningTable
  open var midiInstrument: AVFoundation.AVAudioUnitMIDIInstrument?
  @objc open func play(noteNumber: AudioKit.MIDINoteNumber, velocity: AudioKit.MIDIVelocity, frequency: Swift.Double, channel: AudioKit.MIDIChannel = 0)
  @objc open func play(noteNumber: AudioKit.MIDINoteNumber, velocity: AudioKit.MIDIVelocity, channel: AudioKit.MIDIChannel = 0)
  @objc open func stop(noteNumber: AudioKit.MIDINoteNumber)
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
}
@objc public protocol AKToggleable {
  @objc var isStarted: Swift.Bool { get }
  @objc func start()
  @objc func stop()
}
extension AKToggleable {
  public var isPlaying: Swift.Bool {
    get
  }
  public var isStopped: Swift.Bool {
    get
  }
  public var isBypassed: Swift.Bool {
    get
  }
  public func play()
  public func bypass()
}
@objc open class AKPWMOscillatorFilterSynth : AudioKit.AKPolyphonicNode, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKPWMOscillatorFilterSynthAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pulseWidth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var attackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var decayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var sustainLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var releaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pitchBend: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoDepth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoRate: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterCutoffFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterResonance: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterAttackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterDecayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterSustainLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterReleaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterEnvelopeStrength: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterLFODepth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterLFORate: Swift.Double {
    @objc get
    @objc set
  }
  @objc convenience override dynamic public init()
  @objc public init(pulseWidth: Swift.Double = 0.5, attackDuration: Swift.Double = 0.1, decayDuration: Swift.Double = 0.1, sustainLevel: Swift.Double = 1.0, releaseDuration: Swift.Double = 0.1, pitchBend: Swift.Double = 0, vibratoDepth: Swift.Double = 0, vibratoRate: Swift.Double = 0, filterCutoffFrequency: Swift.Double = 22_050.0, filterResonance: Swift.Double = 0.0, filterAttackDuration: Swift.Double = 0.1, filterDecayDuration: Swift.Double = 0.1, filterSustainLevel: Swift.Double = 1.0, filterReleaseDuration: Swift.Double = 1.0, filterEnvelopeStrength: Swift.Double = 0.0, filterLFODepth: Swift.Double = 0.0, filterLFORate: Swift.Double = 0.0)
  @objc override open func play(noteNumber: AudioKit.MIDINoteNumber, velocity: AudioKit.MIDIVelocity, frequency: Swift.Double, channel: AudioKit.MIDIChannel = 0)
  @objc override open func stop(noteNumber: AudioKit.MIDINoteNumber)
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKPWMOscillatorFilterSynth
}
public enum AKShakerType : Swift.UInt8 {
  case maraca
  case cabasa
  case sekere
  case tambourine
  case sleighBells
  case bambooChimes
  case sandPaper
  case sodaCan
  case sticks
  case crunch
  case bigRocks
  case littleRocks
  case nextMug
  case pennyInMug
  case nickleInMug
  case dimeInMug
  case quarterInMug
  case francInMug
  case pesoInMug
  case guiro
  case wrench
  case waterDrops
  case tunedBambooChimes
  public typealias RawValue = Swift.UInt8
  public init?(rawValue: Swift.UInt8)
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc open class AKShaker : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent {
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public typealias AKAudioUnitType = AudioKit.AKShakerAudioUnit
  open var type: AudioKit.AKShakerType {
    get
    set
  }
  @objc dynamic open var amplitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  public init(type: AudioKit.AKShakerType = .maraca, amplitude: Swift.Double = 0.5)
  open func trigger(amplitude: Swift.Double = -1)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKShaker
}
@objc open class AKOscillatorFilterSynth : AudioKit.AKPolyphonicNode, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKOscillatorFilterSynthAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  open var waveform: AudioKit.AKTable? {
    get
    set
  }
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var attackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var decayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var sustainLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var releaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pitchBend: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoDepth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoRate: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterCutoffFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterResonance: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterAttackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterDecayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterSustainLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterReleaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterEnvelopeStrength: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterLFODepth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterLFORate: Swift.Double {
    @objc get
    @objc set
  }
  @objc convenience override dynamic public init()
  @objc public init(waveform: AudioKit.AKTable, attackDuration: Swift.Double = 0.1, decayDuration: Swift.Double = 0.1, sustainLevel: Swift.Double = 1.0, releaseDuration: Swift.Double = 0.1, pitchBend: Swift.Double = 0, vibratoDepth: Swift.Double = 0, vibratoRate: Swift.Double = 0, filterCutoffFrequency: Swift.Double = 22_050.0, filterResonance: Swift.Double = 0.0, filterAttackDuration: Swift.Double = 0.1, filterDecayDuration: Swift.Double = 0.1, filterSustainLevel: Swift.Double = 1.0, filterReleaseDuration: Swift.Double = 1.0, filterEnvelopeStrength: Swift.Double = 0.0, filterLFODepth: Swift.Double = 0.0, filterLFORate: Swift.Double = 0.0)
  open func reset()
  @objc override open func play(noteNumber: AudioKit.MIDINoteNumber, velocity: AudioKit.MIDIVelocity, frequency: Swift.Double, channel: AudioKit.MIDIChannel = 0)
  @objc override open func stop(noteNumber: AudioKit.MIDINoteNumber)
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKOscillatorFilterSynth
}
extension AKManager {
  @objc public static func connect(_ sourceNode: AVFoundation.AVAudioNode, to destNodes: [AVFoundation.AVAudioConnectionPoint], fromBus sourceBus: AVFoundation.AVAudioNodeBus, format: AVFoundation.AVAudioFormat?)
  @objc public static func connect(_ node1: AVFoundation.AVAudioNode, to node2: AVFoundation.AVAudioNode, fromBus bus1: AVFoundation.AVAudioNodeBus, toBus bus2: AVFoundation.AVAudioNodeBus, format: AVFoundation.AVAudioFormat?)
  @objc public static func connect(_ node1: AVFoundation.AVAudioNode, to node2: AVFoundation.AVAudioNode, format: AVFoundation.AVAudioFormat?)
  @objc public static func detach(nodes: [AVFoundation.AVAudioNode])
  @available(iOS 11, OSX 10.13, tvOS 11, *)
  @objc public static func renderToFile(_ audioFile: AVFoundation.AVAudioFile, maximumFrameCount: AVFoundation.AVAudioFrameCount = 4_096, duration: Swift.Double, prerender: (() -> Swift.Void)? = nil, progress: ((Swift.Double) -> Swift.Void)? = nil) throws
  @available(iOS 11, OSX 10.13, tvOS 11, *)
  public static func printConnections()
}
@objc open class AKHighPassFilter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKInput {
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var cutoffFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var resonance: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var dryWetMix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool
  @objc public init(_ input: AudioKit.AKNode? = nil, cutoffFrequency: Swift.Double = 6_900, resonance: Swift.Double = 0)
  public var inputNode: AVFoundation.AVAudioNode {
    get
  }
  @objc open func start()
  @objc open func stop()
  override open func detach()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKHighPassFilter
}
@objc @_inheritsConvenienceInitializers public class AKBoosterAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKMixer : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKInput {
  @objc dynamic open var volume: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pan: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  convenience public init(_ inputs: AudioKit.AKNode?...)
  @objc convenience public init(_ inputs: [AudioKit.AKNode])
  @objc open func start()
  @objc open func stop()
  @objc override open func detach()
  @available(*, deprecated, message: "use connect(to:AKNode) or connect(to:AKNode, bus:Int) from the upstream node instead")
  open func connect(_ input: AudioKit.AKNode?, bus: Swift.Int? = nil)
  @objc open func connect(input: AudioKit.AKNode?, bus: Swift.Int)
  @objc open func connect(input: AudioKit.AKNode?)
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  @objc deinit
}
extension AVAudioEngine {
  open func connect(_ node1: AVFoundation.AVAudioNode, to node2: AVFoundation.AVAudioNode)
  @available(iOS 11.0, OSX 10.13, tvOS 11.0, *)
  public func renderToFile(_ audioFile: AVFoundation.AVAudioFile, maximumFrameCount: AVFoundation.AVAudioFrameCount = 4_096, duration: Swift.Double, prerender: (() -> Swift.Void)? = nil, progress: ((Swift.Double) -> Swift.Void)? = nil) throws
}
@objc open class AKHighShelfParametricEqualizerFilter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKHighShelfParametricEqualizerFilterAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let centerFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let gainRange: Swift.ClosedRange<Swift.Double>
  public static let qRange: Swift.ClosedRange<Swift.Double>
  public static let defaultCenterFrequency: Swift.Double
  public static let defaultGain: Swift.Double
  public static let defaultQ: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var centerFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var gain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var q: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, centerFrequency: Swift.Double = defaultCenterFrequency, gain: Swift.Double = defaultGain, q: Swift.Double = defaultQ)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKHighShelfParametricEqualizerFilter
}
@objc open class AKSynth : AudioKit.AKPolyphonicNode, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKSynthAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc public var internalAU: AudioKit.AKSynth.AKAudioUnitType?
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var masterVolume: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var pitchBend: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var vibratoDepth: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterCutoff: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterStrength: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterResonance: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var attackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var decayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var sustainLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var releaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterAttackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterDecayDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterSustainLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var filterReleaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc public init(masterVolume: Swift.Double = 1.0, pitchBend: Swift.Double = 0.0, vibratoDepth: Swift.Double = 0.0, filterCutoff: Swift.Double = 4.0, filterStrength: Swift.Double = 20.0, filterResonance: Swift.Double = 0.0, attackDuration: Swift.Double = 0.0, decayDuration: Swift.Double = 0.0, sustainLevel: Swift.Double = 1.0, releaseDuration: Swift.Double = 0.0, filterEnable: Swift.Bool = false, filterAttackDuration: Swift.Double = 0.0, filterDecayDuration: Swift.Double = 0.0, filterSustainLevel: Swift.Double = 1.0, filterReleaseDuration: Swift.Double = 0.0)
  @objc override open func play(noteNumber: AudioKit.MIDINoteNumber, velocity: AudioKit.MIDIVelocity, frequency: Swift.Double, channel: AudioKit.MIDIChannel = 0)
  @objc override open func stop(noteNumber: AudioKit.MIDINoteNumber)
  @objc open func silence(noteNumber: AudioKit.MIDINoteNumber)
  @objc open func sustainPedal(pedalDown: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKSynth
}
@objc @_inheritsConvenienceInitializers public class AKStereoFieldLimiterAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKDynaRageCompressor : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKDynaRageCompressorAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var ratio: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var threshold: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var attackDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var releaseDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var rage: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var rageIsOn: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, ratio: Swift.Double = 1, threshold: Swift.Double = 0.0, attackDuration: Swift.Double = 0.1, releaseDuration: Swift.Double = 0.1, rage: Swift.Double = 0.1, rageIsOn: Swift.Bool = true)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKDynaRageCompressor
}
extension AKComputedParameter {
  public func moogLadderFilter(cutoffFrequency: AudioKit.AKParameter = 1_000, resonance: AudioKit.AKParameter = 0.5) -> AudioKit.AKOperation
}
@objc @available(iOS, obsoleted: 11)
@available(tvOS, obsoleted: 11)
@available(OSX, obsoleted: 10.13)
open class AKOfflineRenderNode : AudioKit.AKNode, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKOfflineRenderAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  open var internalRenderEnabled: Swift.Bool {
    get
    set
  }
  @objc public func renderToURL(_ url: Foundation.URL, duration: Swift.Double, settings: [Swift.String : Any]? = nil) throws
  @objc public func renderToBuffer(for duration: Swift.Double) throws -> AVFoundation.AVAudioPCMBuffer
  @objc public init(_ input: AudioKit.AKNode? = nil)
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKOfflineRenderNode
}
@objc open class AKFFTTap : ObjectiveC.NSObject, AudioKit.EZAudioFFTDelegate {
  final public let fftSize: AudioKit.AKSettings.BufferLength
  @objc open var fftData: [Swift.Double]
  public init(_ input: AudioKit.AKNode, fftSize: AudioKit.AKSettings.BufferLength = .veryLong)
  @objc open func fft(_ fft: AudioKit.EZAudioFFT!, updatedWithFFTData fftData: Swift.UnsafeMutablePointer<Swift.Float>, bufferSize: Accelerate.vDSP_Length)
  @objc deinit
  @objc override dynamic public init()
}
@objc open class AKLowShelfParametricEqualizerFilter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKLowShelfParametricEqualizerFilterAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let cornerFrequencyRange: Swift.ClosedRange<Swift.Double>
  public static let gainRange: Swift.ClosedRange<Swift.Double>
  public static let qRange: Swift.ClosedRange<Swift.Double>
  public static let defaultCornerFrequency: Swift.Double
  public static let defaultGain: Swift.Double
  public static let defaultQ: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var cornerFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var gain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var q: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, cornerFrequency: Swift.Double = defaultCornerFrequency, gain: Swift.Double = defaultGain, q: Swift.Double = defaultQ)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKLowShelfParametricEqualizerFilter
}
extension AKComputedParameter {
  public func lowPassFilter(halfPowerPoint: AudioKit.AKParameter = 1_000) -> AudioKit.AKOperation
}
@objc open class AKInputConnection : ObjectiveC.NSObject {
  open var node: AudioKit.AKInput
  open var bus: Swift.Int
  public init(node: AudioKit.AKInput, bus: Swift.Int)
  open var avConnection: AVFoundation.AVAudioConnectionPoint {
    get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol AKOutput : AnyObject {
  @objc var outputNode: AVFoundation.AVAudioNode { get }
}
extension AKOutput {
  public var connectionPoints: [AVFoundation.AVAudioConnectionPoint] {
    get
    set
  }
  public func disconnectOutput()
  public func disconnectOutput(from: AudioKit.AKInput)
  @discardableResult
  public func connect(to node: AudioKit.AKInput) -> AudioKit.AKInput
  @discardableResult
  public func connect(to input: AudioKit.AKInputConnection) -> AudioKit.AKInput
  @discardableResult
  public func connect(to node: AudioKit.AKInput, bus: Swift.Int) -> AudioKit.AKInput
  @discardableResult
  public func connect(to nodes: [AudioKit.AKInput]) -> [AudioKit.AKInput]
  @discardableResult
  public func connect(toInputs: [AudioKit.AKInputConnection]) -> [AudioKit.AKInput]
  public func connect(to connectionPoint: AVFoundation.AVAudioConnectionPoint)
  @discardableResult
  public func setOutput(to node: AudioKit.AKInput) -> AudioKit.AKInput
  @discardableResult
  public func setOutput(to node: AudioKit.AKInput, bus: Swift.Int, format: AVFoundation.AVAudioFormat?) -> AudioKit.AKInput
  @discardableResult
  public func setOutput(to nodes: [AudioKit.AKInput], format: AVFoundation.AVAudioFormat?) -> [AudioKit.AKInput]
  @discardableResult
  public func setOutput(toInputs: [AudioKit.AKInputConnection]) -> [AudioKit.AKInput]
  @discardableResult
  public func setOutput(toInputs: [AudioKit.AKInputConnection], format: AVFoundation.AVAudioFormat?) -> [AudioKit.AKInput]
  public func setOutput(to connectionPoint: AVFoundation.AVAudioConnectionPoint)
  public func setOutput(to connectionPoint: AVFoundation.AVAudioConnectionPoint, format: AVFoundation.AVAudioFormat?)
  public func setOutput(to connectionPoints: [AVFoundation.AVAudioConnectionPoint], format: AVFoundation.AVAudioFormat?)
}
public protocol AKInput : AudioKit.AKOutput {
  var inputNode: AVFoundation.AVAudioNode { get }
  var nextInput: AudioKit.AKInputConnection { get }
  func disconnectInput()
  func disconnectInput(bus: Swift.Int)
  func input(_ bus: Swift.Int) -> AudioKit.AKInputConnection
}
extension AKInput {
  public var inputNode: AVFoundation.AVAudioNode {
    get
  }
  public func disconnectInput()
  public func disconnectInput(bus: Swift.Int)
  public var nextInput: AudioKit.AKInputConnection {
    get
  }
  public func input(_ bus: Swift.Int) -> AudioKit.AKInputConnection
}
@objc extension AVAudioNode : AudioKit.AKInput {
  @objc dynamic public var outputNode: AVFoundation.AVAudioNode {
    @objc get
  }
}
infix operator >>> : AdditionPrecedence
@discardableResult
public func >>> (left: AudioKit.AKOutput, right: AudioKit.AKInput) -> AudioKit.AKInput
@discardableResult
public func >>> (left: AudioKit.AKOutput, right: [AudioKit.AKInput]) -> [AudioKit.AKInput]
@discardableResult
public func >>> (left: [AudioKit.AKOutput], right: AudioKit.AKInput) -> AudioKit.AKInput
@discardableResult
public func >>> (left: AudioKit.AKOutput, right: AudioKit.AKInputConnection) -> AudioKit.AKInput
@discardableResult
public func >>> (left: AudioKit.AKOutput, right: [AudioKit.AKInputConnection]) -> [AudioKit.AKInput]
public func >>> (left: AudioKit.AKOutput, right: AVFoundation.AVAudioConnectionPoint)
@objc @_inheritsConvenienceInitializers public class AKAutoPannerAudioUnit : AudioKit.AKAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class AKFlute : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent {
  public typealias AKAudioUnitType = AudioKit.AKFluteAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var frequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var amplitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(frequency: Swift.Double = 440, amplitude: Swift.Double = 0.5)
  open func trigger()
  open func trigger(frequency: Swift.Double, amplitude: Swift.Double = 1)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKFlute
}
@objc @_inheritsConvenienceInitializers public class AKDripAudioUnit : AudioKit.AKGeneratorAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public init(componentDescription: AudioToolbox.AudioComponentDescription, options: AudioToolbox.AudioComponentInstantiationOptions = []) throws
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AKSynthAudioUnit : AudioKit.AKGeneratorAudioUnitBase {
  @objc override dynamic public func initDSP(withSampleRate sampleRate: Swift.Double, channelCount count: AVFoundation.AVAudioChannelCount) -> AudioKit.AKDSPRef
  @objc override dynamic public var canProcessInPlace: Swift.Bool {
    @objc get
  }
  public func playNote(noteNumber: Swift.UInt8, velocity: Swift.UInt8, noteFrequency: Swift.Float)
  public func stopNote(noteNumber: Swift.UInt8, immediate: Swift.Bool)
  public func sustainPedal(down: Swift.Bool)
  @objc override dynamic public func shouldClearOutputBuffer() -> Swift.Bool
  @objc deinit
}
@objc open class AKBalancer : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKBalancerAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, comparator: AudioKit.AKNode)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKBalancer
}
@objc open class AKAutoWah : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKComponent, AudioKit.AKInput {
  public typealias AKAudioUnitType = AudioKit.AKAutoWahAudioUnit
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  public static let wahRange: Swift.ClosedRange<Swift.Double>
  public static let mixRange: Swift.ClosedRange<Swift.Double>
  public static let amplitudeRange: Swift.ClosedRange<Swift.Double>
  public static let defaultWah: Swift.Double
  public static let defaultMix: Swift.Double
  public static let defaultAmplitude: Swift.Double
  @objc dynamic open var rampDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var wah: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var mix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var amplitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool {
    @objc get
  }
  @objc public init(_ input: AudioKit.AKNode? = nil, wah: Swift.Double = defaultWah, mix: Swift.Double = defaultMix, amplitude: Swift.Double = defaultAmplitude)
  @objc open func start()
  @objc open func stop()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKAutoWah
}
@objc open class AKLowShelfFilter : AudioKit.AKNode, AudioKit.AKToggleable, AudioKit.AKInput {
  public static let ComponentDescription: AudioToolbox.AudioComponentDescription
  @objc dynamic open var cutoffFrequency: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var gain: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var dryWetMix: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var isStarted: Swift.Bool
  @objc public init(_ input: AudioKit.AKNode? = nil, cutoffFrequency: Swift.Double = 80, gain: Swift.Double = 0)
  public var inputNode: AVFoundation.AVAudioNode {
    get
  }
  @objc open func start()
  @objc open func stop()
  override open func detach()
  @objc deinit
  @objc override dynamic public init()
  @objc override public init(avAudioUnit: AVFoundation.AVAudioUnit, attach: Swift.Bool = super)
  @objc override public init(avAudioNode: AVFoundation.AVAudioNode, attach: Swift.Bool = super)
  public typealias _Self = AudioKit.AKLowShelfFilter
}
extension AudioKit.ClipMergeError : Swift.Equatable {}
extension AudioKit.ClipMergeError : Swift.Hashable {}
extension AudioKit.AKDistortion : AudioKit.AUComponent {}
extension AudioKit.AKRingModulator : AudioKit.AUComponent {}
extension AudioKit.AKAudioFile.BaseDirectory : Swift.Equatable {}
extension AudioKit.AKAudioFile.BaseDirectory : Swift.Hashable {}
extension AudioKit.AKCompressor : AudioKit.AUComponent {}
extension AudioKit.AKDecimator : AudioKit.AUComponent {}
extension AudioKit.AKAbstractPlayer.RenderingMode : Swift.Equatable {}
extension AudioKit.AKAbstractPlayer.RenderingMode : Swift.Hashable {}
extension AudioKit.AKLowPassFilter : AudioKit.AUComponent {}
extension AudioKit.AKPeakLimiter : AudioKit.AUComponent {}
extension AudioKit.SampleTriggerMode : Swift.Equatable {}
extension AudioKit.SampleTriggerMode : Swift.Hashable {}
extension AudioKit.SampleTriggerMode : Swift.RawRepresentable {}
extension AudioKit.AKExpander : AudioKit.AUComponent {}
extension AudioKit.AKSettings.BufferLength : Swift.Equatable {}
extension AudioKit.AKSettings.BufferLength : Swift.Hashable {}
extension AudioKit.AKSettings.BufferLength : Swift.RawRepresentable {}
extension AudioKit.AKSettings.RampType : Swift.Equatable {}
extension AudioKit.AKSettings.RampType : Swift.Hashable {}
extension AudioKit.AKSettings.RampType : Swift.RawRepresentable {}
extension AudioKit.AKSettings.SessionCategory : Swift.Equatable {}
extension AudioKit.AKSettings.SessionCategory : Swift.Hashable {}
extension AudioKit.AKSettings.SessionCategory : Swift.RawRepresentable {}
extension AudioKit.AKTableType : Swift.Equatable {}
extension AudioKit.AKTableType : Swift.Hashable {}
extension AudioKit.AKTableType : Swift.RawRepresentable {}
extension AudioKit.AKHighShelfFilter : AudioKit.AUComponent {}
extension AudioKit.AKDynamicsProcessor : AudioKit.AUComponent {}
extension AudioKit.AKPlayer.BufferingType : Swift.Equatable {}
extension AudioKit.AKPlayer.BufferingType : Swift.Hashable {}
extension AudioKit.AmplitudeTrackingMode : Swift.Equatable {}
extension AudioKit.AmplitudeTrackingMode : Swift.Hashable {}
extension AudioKit.AmplitudeTrackingMode : Swift.RawRepresentable {}
extension AudioKit.ClipRecordingError : Swift.Equatable {}
extension AudioKit.ClipRecordingError : Swift.Hashable {}
extension AudioKit.AKShakerType : Swift.Equatable {}
extension AudioKit.AKShakerType : Swift.Hashable {}
extension AudioKit.AKShakerType : Swift.RawRepresentable {}
extension AudioKit.AKHighPassFilter : AudioKit.AUComponent {}
extension AudioKit.AKLowShelfFilter : AudioKit.AUComponent {}
